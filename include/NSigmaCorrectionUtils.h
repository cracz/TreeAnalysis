#ifndef NSIGMACORRECTIONUTILS
#define NSIGMACORRECTIONUTILS

namespace NSigmaCorrectionUtils
{
  struct NewNSigmaProton3p2GeV_SL23d
  {
    double pointwise_momentum_3p2[370] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 
					  0.185, 0.195, 0.205, 0.215, 0.225, 0.235, 0.245, 0.255, 0.265, 0.275, 0.285, 0.295, 0.305, 0.315, 0.325, 0.335, 0.345, 0.355, 
					  0.365, 0.375, 0.385, 0.395, 0.405, 0.415, 0.425, 0.435, 0.445, 0.455, 0.465, 0.475, 0.485, 0.495, 0.505, 0.515, 0.525, 0.535, 
					  0.545, 0.555, 0.565, 0.575, 0.585, 0.595, 0.605, 0.615, 0.625, 0.635, 0.645, 0.655, 0.665, 0.675, 0.685, 0.695, 0.705, 0.715, 
					  0.725, 0.735, 0.745, 0.755, 0.765, 0.775, 0.785, 0.795, 0.805, 0.815, 0.825, 0.835, 0.845, 0.855, 0.865, 0.875, 0.885, 0.895, 
					  0.905, 0.915, 0.925, 0.935, 0.945, 0.955, 0.965, 0.975, 0.985, 0.995, 1.005, 1.015, 1.025, 1.035, 1.045, 1.055, 1.065, 1.075, 
					  1.085, 1.095, 1.105, 1.115, 1.125, 1.135, 1.145, 1.155, 1.165, 1.175, 1.185, 1.195, 1.205, 1.215, 1.225, 1.235, 1.245, 1.255, 
					  1.265, 1.275, 1.285, 1.295, 1.305, 1.315, 1.325, 1.335, 1.345, 1.355, 1.365, 1.375, 1.385, 1.395, 1.405, 1.415, 1.425, 1.435, 
					  1.445, 1.455, 1.465, 1.475, 1.485, 1.495, 1.505, 1.515, 1.525, 1.535, 1.545, 1.555, 1.565, 1.575, 1.585, 1.595, 1.605, 1.615, 
					  1.625, 1.635, 1.645, 1.655, 1.665, 1.675, 1.685, 1.695, 1.705, 1.715, 1.725, 1.735, 1.745, 1.755, 1.765, 1.775, 1.785, 1.795, 
					  1.805, 1.815, 1.825, 1.835, 1.845, 1.855, 1.865, 1.875, 1.885, 1.895, 1.905, 1.915, 1.925, 1.935, 1.945, 1.955, 1.965, 1.975, 
					  1.985, 1.995, 2.005, 2.015, 2.025, 2.035, 2.045, 2.055, 2.065, 2.075, 2.085, 2.095, 2.105, 2.115, 2.125, 2.135, 2.145, 2.155, 
					  2.165, 2.175, 2.185, 2.195, 2.205, 2.215, 2.225, 2.235, 2.245, 2.255, 2.265, 2.275, 2.285, 2.295, 2.305, 2.315, 2.325, 2.335, 
					  2.345, 2.355, 2.365, 2.375, 2.385, 2.395, 2.405, 2.415, 2.425, 2.435, 2.445, 2.455, 2.465, 2.475, 2.485, 2.495, 2.505, 2.515, 
					  2.525, 2.535, 2.545, 2.555, 2.565, 2.575, 2.585, 2.595, 2.605, 2.615, 2.625, 2.635, 2.645, 2.655, 2.665, 2.675, 2.685, 2.695, 
					  2.705, 2.715, 2.725, 2.735, 2.745, 2.755, 2.765, 2.775, 2.785, 2.795, 2.805, 2.815, 2.825, 2.835, 2.845, 2.855, 2.865, 2.875, 
					  2.885, 2.895, 2.905, 2.915, 2.925, 2.935, 2.945, 2.955, 2.965, 2.975, 2.985, 2.995, 3.005, 3.015, 3.025, 3.035, 3.045, 3.055, 
					  3.065, 3.075, 3.085, 3.095, 3.105, 3.115, 3.125, 3.135, 3.145, 3.155, 3.165, 3.175, 3.185, 3.195, 3.205, 3.215, 3.225, 3.235, 
					  3.245, 3.255, 3.265, 3.275, 3.285, 3.295, 3.305, 3.315, 3.325, 3.335, 3.345, 3.355, 3.365, 3.375, 3.385, 3.395, 3.405, 3.415, 
					  3.425, 3.435, 3.445, 3.455, 3.465, 3.475, 3.485, 3.495, 3.505, 3.515, 3.525, 3.535, 3.545, 3.555, 3.565, 3.575, 3.585, 3.595, 
					  3.605, 3.615, 3.625, 3.635, 3.645, 3.655, 3.665, 3.675, 3.685, 3.695};

    double pointwise_mean_3p2[370] = {4.71066, 4.71066, 4.71066, 4.71066, 4.71066, 4.71066, 4.71066, 4.71066, 4.71066, 4.71066, 4.71066, 4.58676, 4.11235, 4.0615, 
				      4.02315, 3.9771, 3.92816, 3.87873, 3.82658, 3.77075, 3.7116, 3.65043, 3.5881, 3.52527, 3.46241, 3.40015, 3.33864, 3.27837, 
				      3.21945, 3.16208, 3.10635, 3.05225, 2.99971, 2.94881, 2.89936, 2.85161, 2.80526, 2.76032, 2.7168, 2.67461, 2.63362, 2.59386, 
				      2.55521, 2.51773, 2.48146, 2.44617, 2.41178, 2.37852, 2.34612, 2.31468, 2.28401, 2.25433, 2.2253, 2.19717, 2.16968, 2.14304, 
				      2.11703, 2.09167, 2.06703, 2.04302, 2.0197, 1.99696, 1.97471, 1.95306, 1.93202, 1.91134, 1.89113, 1.87149, 1.85239, 1.83357, 
				      1.81538, 1.79758, 1.78026, 1.76339, 1.7469, 1.73092, 1.71523, 1.70003, 1.68514, 1.67063, 1.65655, 1.64272, 1.62916, 1.61601, 
				      1.60318, 1.59064, 1.57831, 1.56631, 1.55449, 1.54296, 1.53166, 1.52067, 1.50994, 1.4994, 1.48906, 1.47898, 1.46915, 1.45948, 
				      1.45004, 1.44084, 1.43181, 1.42281, 1.41422, 1.40574, 1.39741, 1.38945, 1.38146, 1.37367, 1.36604, 1.3586, 1.35125, 1.34406, 
				      1.33701, 1.33027, 1.32353, 1.3169, 1.31037, 1.30412, 1.29776, 1.29157, 1.28551, 1.2797, 1.27386, 1.26804, 1.26245, 1.25684, 
				      1.25148, 1.24602, 1.24071, 1.23551, 1.23031, 1.22525, 1.22019, 1.21532, 1.21045, 1.20568, 1.20101, 1.19642, 1.19189, 1.18754, 
				      1.18323, 1.179, 1.17474, 1.17077, 1.1666, 1.16277, 1.1589, 1.15525, 1.15157, 1.14792, 1.14443, 1.14097, 1.13757, 1.13436, 
				      1.13105, 1.12784, 1.12476, 1.12159, 1.11866, 1.11569, 1.11273, 1.1099, 1.10711, 1.10431, 1.10164, 1.09906, 1.09648, 1.09394, 
				      1.09141, 1.08889, 1.08655, 1.08422, 1.08195, 1.07962, 1.07739, 1.0753, 1.07311, 1.0709, 1.0689, 1.06687, 1.06499, 1.06299, 
				      1.06112, 1.05926, 1.05746, 1.05558, 1.05367, 1.05197, 1.05032, 1.04856, 1.04694, 1.04534, 1.04373, 1.0422, 1.04061, 1.03907, 
				      1.03767, 1.03622, 1.03479, 1.03323, 1.03162, 1.03029, 1.0289, 1.02764, 1.02626, 1.02496, 1.0237, 1.02243, 1.02118, 1.02006, 
				      1.01886, 1.01771, 1.01654, 1.01537, 1.01432, 1.0133, 1.01206, 1.01105, 1.01001, 1.00895, 1.00797, 1.00698, 1.00601, 1.0051, 
				      1.00414, 1.00321, 1.00224, 1.00148, 1.00049, 0.999737, 0.998866, 0.998007, 0.997151, 0.996393, 0.995593, 0.994816, 0.994115, 
				      0.993294, 0.992587, 0.991789, 0.991139, 0.990484, 0.98972, 0.989085, 0.988396, 0.987692, 0.987086, 0.986678, 0.986033, 0.98544, 
				      0.984918, 0.984345, 0.983818, 0.983292, 0.982785, 0.982176, 0.981851, 0.981214, 0.980785, 0.980263, 0.979849, 0.979457, 0.978888, 
				      0.978474, 0.978092, 0.977678, 0.97937, 0.97693, 0.976607, 0.976262, 0.975911, 0.975386, 0.975014, 0.974765, 0.974432, 0.974146, 
				      0.973809, 0.973403, 0.973118, 0.972765, 0.97267, 0.972269, 0.97193, 0.971649, 0.971419, 0.971201, 0.970979, 0.970754, 0.970455, 
				      0.970351, 0.96996, 0.969782, 0.969557, 0.969373, 0.969224, 0.969241, 0.968866, 0.968617, 0.968753, 0.968678, 0.968408, 0.968297, 
				      0.968373, 0.96817, 0.968135, 0.968137, 0.967972, 0.967951, 0.967762, 0.967778, 0.967642, 0.967867, 0.967367, 0.967528, 0.967644, 
				      0.967578, 0.967576, 0.967448, 0.967294, 0.967608, 0.967455, 0.967289, 0.967044, 0.967247, 0.967427, 0.967522, 0.967774, 0.96731, 
				      0.967924, 0.967674, 0.96788, 0.96832, 0.967466, 0.968159, 0.967727, 0.96803, 0.967609, 0.968547, 0.968121, 0.968706, 0.968617, 
				      0.968768, 0.969043, 0.968786, 0.969068, 0.969214, 0.969326, 0.969161, 0.969535, 0.969141, 0.969301, 0.969495, 0.9687, 0.969329, 
				      0.968939, 0.96913, 0.969691, 0.970551, 0.970757, 0.971036, 0.970827, 0.971156, 0.971447, 0.971207, 0.971668, 0.971902, 0.972376, 
				      0.972533, 0.972049, 0.972151};

    double pointwise_1sig_3p2[370] = {4.66213, 4.66213, 4.66213, 4.66213, 4.66213, 4.66213, 4.66213, 4.66213, 4.66213, 4.66213, 4.66213, 4.51676, 4.04235, 3.9915, 
				      3.95315, 3.9071, 3.85816, 3.80889, 3.76063, 3.70671, 3.64746, 3.58495, 3.52072, 3.45581, 3.39241, 3.33015, 3.26864, 3.20837, 
				      3.14945, 3.09208, 3.03635, 2.98225, 2.92971, 2.87881, 2.82936, 2.78161, 2.73526, 2.69032, 2.6468, 2.60461, 2.56362, 2.52386, 
				      2.48521, 2.44773, 2.41146, 2.37617, 2.34178, 2.30852, 2.27612, 2.24468, 2.21401, 2.18433, 2.1553, 2.12717, 2.09968, 2.07304, 
				      2.04703, 2.02167, 1.99703, 1.97302, 1.9497, 1.92696, 1.90471, 1.88306, 1.86202, 1.84134, 1.82113, 1.80149, 1.78239, 1.76357, 
				      1.74538, 1.72758, 1.71026, 1.69339, 1.6769, 1.66092, 1.64523, 1.63003, 1.61514, 1.60063, 1.58655, 1.57272, 1.55916, 1.54601, 
				      1.53318, 1.52064, 1.50831, 1.49651, 1.48519, 1.47404, 1.46313, 1.4525, 1.44211, 1.43187, 1.42189, 1.41207, 1.40253, 1.39313, 
				      1.38399, 1.37497, 1.36619, 1.35761, 1.3492, 1.341, 1.3329, 1.32502, 1.31727, 1.30976, 1.30226, 1.29508, 1.28794, 1.28099, 
				      1.27414, 1.26738, 1.26084, 1.25432, 1.24799, 1.24165, 1.23542, 1.22937, 1.22344, 1.21746, 1.21164, 1.20589, 1.20006, 1.19453, 
				      1.18892, 1.18341, 1.17801, 1.17254, 1.1673, 1.16185, 1.15675, 1.15154, 1.14663, 1.14157, 1.13682, 1.13192, 1.12726, 1.1227, 
				      1.11848, 1.11403, 1.10975, 1.10563, 1.10151, 1.09754, 1.09373, 1.08998, 1.08621, 1.08271, 1.07909, 1.07571, 1.07224, 1.06899, 
				      1.06582, 1.06252, 1.05938, 1.05637, 1.05344, 1.05042, 1.04768, 1.04464, 1.04186, 1.03925, 1.03651, 1.034, 1.03148, 1.02894, 
				      1.0262, 1.0239, 1.02155, 1.01924, 1.0169, 1.01479, 1.01255, 1.01049, 1.00811, 1.00606, 1.00408, 1.00211, 1.00022, 0.998286, 
				      0.996359, 0.99454, 0.992764, 0.990977, 0.988861, 0.987095, 0.98547, 0.983784, 0.982178, 0.980574, 0.978966, 0.977434, 0.975944, 
				      0.9744, 0.972907, 0.971447, 0.970015, 0.968307, 0.966873, 0.965552, 0.964172, 0.962898, 0.961587, 0.960353, 0.959047, 0.957816, 
				      0.956606, 0.955409, 0.954273, 0.953159, 0.952014, 0.950834, 0.949836, 0.948721, 0.947612, 0.946603, 0.945232, 0.944248, 0.94328, 
				      0.942265, 0.941301, 0.940416, 0.939368, 0.938523, 0.937622, 0.936719, 0.935895, 0.935054, 0.934203, 0.933453, 0.932608, 0.931845, 
				      0.93103, 0.930303, 0.929515, 0.928727, 0.928025, 0.927281, 0.926578, 0.925937, 0.925249, 0.924532, 0.923914, 0.923158, 0.922653, 
				      0.922117, 0.921493, 0.920872, 0.920388, 0.919799, 0.919247, 0.918634, 0.918115, 0.917556, 0.917089, 0.916483, 0.91598, 0.915577, 
				      0.91502, 0.914632, 0.914083, 0.913346, 0.912902, 0.912342, 0.911502, 0.911607, 0.911197, 0.910863, 0.910417, 0.909924, 0.909501, 
				      0.909198, 0.908777, 0.90846, 0.908107, 0.907678, 0.907473, 0.906972, 0.906753, 0.906456, 0.906111, 0.905816, 0.90546, 0.90529, 
				      0.905001, 0.904755, 0.904396, 0.904104, 0.903932, 0.90359, 0.903371, 0.903055, 0.902922, 0.902708, 0.902532, 0.902097, 0.902037, 
				      0.901934, 0.901764, 0.901525, 0.901435, 0.901229, 0.901113, 0.90085, 0.900717, 0.900602, 0.900472, 0.900256, 0.900068, 0.900242, 
				      0.899724, 0.899841, 0.899704, 0.899641, 0.899604, 0.899502, 0.899194, 0.899253, 0.899102, 0.899, 0.898908, 0.898773, 0.898812, 
				      0.898863, 0.89901, 0.898642, 0.898684, 0.89861, 0.898539, 0.898766, 0.898267, 0.89876, 0.898494, 0.898645, 0.898397, 0.898869, 
				      0.898632, 0.898919, 0.898917, 0.899014, 0.899043, 0.898875, 0.899068, 0.899214, 0.899326, 0.899161, 0.899535, 0.899141, 0.899301, 
				      0.899495, 0.8987, 0.899329, 0.898939, 0.89913, 0.899691, 0.900551, 0.900757, 0.901036, 0.900827, 0.901156, 0.901447, 0.901207, 
				      0.901668, 0.901902, 0.902376, 0.902533, 0.902049, 0.902151};

    const int numPoints_3p2 = 370;
    TGraph* mean_graph = new TGraph(numPoints_3p2 ,pointwise_momentum_3p2,pointwise_mean_3p2);
    TGraph* sig1_graph = new TGraph(numPoints_3p2 ,pointwise_momentum_3p2,pointwise_1sig_3p2);

    Double_t calculateNsigma(double lndedx, double momentum, int nHitsDedx)
    {
      Double_t nSigmaProton = 999;
      Double_t shiftValue = mean_graph->Eval(momentum);
      Double_t stretchValue = sig1_graph->Eval(momentum);

      // Now shift and stretch ln(de/dx) to get nSigmaProton 
      Double_t shiftedLnDedx = lndedx-shiftValue;
      nSigmaProton = shiftedLnDedx/(shiftValue-stretchValue);

      // Reject tracks with the following traits 
      //if(nHitsDedx<20) nSigmaProton = 999;
      //if(momentum<0.12 || momentum > 10.0) nSigmaProton = 999;
      return nSigmaProton;
    }
  };// End NewNSigmaProton3p2GeV_SL23d


  struct NewNSigmaProton3p5GeV_SL23d
  {
    double pointwise_momentum_3p5[410] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195, 0.205, 0.215, 0.225, 0.235, 0.245, 0.255, 0.265, 0.275, 0.285, 0.295, 0.305, 0.315, 0.325, 0.335, 0.345, 0.355, 0.365, 0.375, 0.385, 0.395, 0.405, 0.415, 0.425, 0.435, 0.445, 0.455, 0.465, 0.475, 0.485, 0.495, 0.505, 0.515, 0.525, 0.535, 0.545, 0.555, 0.565, 0.575, 0.585, 0.595, 0.605, 0.615, 0.625, 0.635, 0.645, 0.655, 0.665, 0.675, 0.685, 0.695, 0.705, 0.715, 0.725, 0.735, 0.745, 0.755, 0.765, 0.775, 0.785, 0.795, 0.805, 0.815, 0.825, 0.835, 0.845, 0.855, 0.865, 0.875, 0.885, 0.895, 0.905, 0.915, 0.925, 0.935, 0.945, 0.955, 0.965, 0.975, 0.985, 0.995, 1.005, 1.015, 1.025, 1.035, 1.045, 1.055, 1.065, 1.075, 1.085, 1.095, 1.105, 1.115, 1.125, 1.135, 1.145, 1.155, 1.165, 1.175, 1.185, 1.195, 1.205, 1.215, 1.225, 1.235, 1.245, 1.255, 1.265, 1.275, 1.285, 1.295, 1.305, 1.315, 1.325, 1.335, 1.345, 1.355, 1.365, 1.375, 1.385, 1.395, 1.405, 1.415, 1.425, 1.435, 1.445, 1.455, 1.465, 1.475, 1.485, 1.495, 1.505, 1.515, 1.525, 1.535, 1.545, 1.555, 1.565, 1.575, 1.585, 1.595, 1.605, 1.615, 1.625, 1.635, 1.645, 1.655, 1.665, 1.675, 1.685, 1.695, 1.705, 1.715, 1.725, 1.735, 1.745, 1.755, 1.765, 1.775, 1.785, 1.795, 1.805, 1.815, 1.825, 1.835, 1.845, 1.855, 1.865, 1.875, 1.885, 1.895, 1.905, 1.915, 1.925, 1.935, 1.945, 1.955, 1.965, 1.975, 1.985, 1.995, 2.005, 2.015, 2.025, 2.035, 2.045, 2.055, 2.065, 2.075, 2.085, 2.095, 2.105, 2.115, 2.125, 2.135, 2.145, 2.155, 2.165, 2.175, 2.185, 2.195, 2.205, 2.215, 2.225, 2.235, 2.245, 2.255, 2.265, 2.275, 2.285, 2.295, 2.305, 2.315, 2.325, 2.335, 2.345, 2.355, 2.365, 2.375, 2.385, 2.395, 2.405, 2.415, 2.425, 2.435, 2.445, 2.455, 2.465, 2.475, 2.485, 2.495, 2.505, 2.515, 2.525, 2.535, 2.545, 2.555, 2.565, 2.575, 2.585, 2.595, 2.605, 2.615, 2.625, 2.635, 2.645, 2.655, 2.665, 2.675, 2.685, 2.695, 2.705, 2.715, 2.725, 2.735, 2.745, 2.755, 2.765, 2.775, 2.785, 2.795, 2.805, 2.815, 2.825, 2.835, 2.845, 2.855, 2.865, 2.875, 2.885, 2.895, 2.905, 2.915, 2.925, 2.935, 2.945, 2.955, 2.965, 2.975, 2.985, 2.995, 3.005, 3.015, 3.025, 3.035, 3.045, 3.055, 3.065, 3.075, 3.085, 3.095, 3.105, 3.115, 3.125, 3.135, 3.145, 3.155, 3.165, 3.175, 3.185, 3.195, 3.205, 3.215, 3.225, 3.235, 3.245, 3.255, 3.265, 3.275, 3.285, 3.295, 3.305, 3.315, 3.325, 3.335, 3.345, 3.355, 3.365, 3.375, 3.385, 3.395, 3.405, 3.415, 3.425, 3.435, 3.445, 3.455, 3.465, 3.475, 3.485, 3.495, 3.505, 3.515, 3.525, 3.535, 3.545, 3.555, 3.565, 3.575, 3.585, 3.595, 3.605, 3.615, 3.625, 3.635, 3.645, 3.655, 3.665, 3.675, 3.685, 3.695, 3.705, 3.715, 3.725, 3.735, 3.745, 3.755, 3.765, 3.775, 3.785, 3.795, 3.805, 3.815, 3.825, 3.835, 3.845, 3.855, 3.865, 3.875, 3.885, 3.895, 3.905, 3.915, 3.925, 3.935, 3.945, 3.955, 3.965, 3.975, 3.985, 3.995, 4.005, 4.015, 4.025, 4.035, 4.045, 4.055, 4.065, 4.075, 4.085, 4.095};

    double pointwise_mean_3p5[410] = {4.71004, 4.71004, 4.71004, 4.71004, 4.71004, 4.71004, 4.71004, 4.71004, 4.71004, 4.71004, 4.71004, 4.59168, 4.11235, 4.05581, 4.01458, 3.96503, 3.91764, 3.87165, 3.82245, 3.76826, 3.70982, 3.64867, 3.58591, 3.52261, 3.45948, 3.39693, 3.33533, 3.2751, 3.21632, 3.15904, 3.10344, 3.04948, 2.99722, 2.94639, 2.89721, 2.84952, 2.8032, 2.75833, 2.71487, 2.67267, 2.63173, 2.59202, 2.55341, 2.51591, 2.47962, 2.44432, 2.41, 2.3767, 2.34431, 2.31279, 2.28215, 2.25248, 2.22346, 2.19526, 2.16779, 2.1411, 2.11513, 2.08976, 2.06507, 2.04114, 2.01775, 1.99506, 1.97286, 1.95113, 1.93008, 1.90934, 1.88914, 1.8695, 1.8504, 1.83151, 1.81327, 1.79545, 1.77802, 1.7611, 1.74456, 1.72847, 1.71283, 1.69756, 1.68266, 1.66816, 1.65405, 1.64026, 1.62675, 1.61366, 1.60085, 1.5883, 1.57606, 1.56407, 1.55239, 1.54086, 1.52967, 1.51867, 1.50797, 1.49747, 1.48716, 1.47714, 1.46733, 1.45773, 1.44833, 1.4392, 1.43019, 1.42125, 1.41268, 1.40427, 1.396, 1.38809, 1.38016, 1.37245, 1.36486, 1.35747, 1.35016, 1.34304, 1.33604, 1.32934, 1.32264, 1.31605, 1.30957, 1.30338, 1.29707, 1.29093, 1.28489, 1.27909, 1.27325, 1.26748, 1.26194, 1.25629, 1.2509, 1.24543, 1.24003, 1.23478, 1.22945, 1.22439, 1.21919, 1.21412, 1.20912, 1.20423, 1.19937, 1.19469, 1.18993, 1.18538, 1.18088, 1.1766, 1.17222, 1.1681, 1.16394, 1.16002, 1.1561, 1.15222, 1.14851, 1.14488, 1.14132, 1.1378, 1.13448, 1.13116, 1.12788, 1.12463, 1.12154, 1.11841, 1.11539, 1.11246, 1.10956, 1.10667, 1.10393, 1.1011, 1.09851, 1.0959, 1.0933, 1.09088, 1.08824, 1.08577, 1.08347, 1.08119, 1.07883, 1.0766, 1.07436, 1.07234, 1.07012, 1.06799, 1.06596, 1.06398, 1.06206, 1.06017, 1.05831, 1.0565, 1.05472, 1.05296, 1.05099, 1.04929, 1.04765, 1.04598, 1.04439, 1.04276, 1.04127, 1.03979, 1.03832, 1.03681, 1.03545, 1.03395, 1.0326, 1.03099, 1.02967, 1.02832, 1.02709, 1.02576, 1.02453, 1.02333, 1.0221, 1.02092, 1.01967, 1.01851, 1.01745, 1.01619, 1.01522, 1.01397, 1.01289, 1.01187, 1.01082, 1.00964, 1.00891, 1.00758, 1.0066, 1.0057, 1.00465, 1.00379, 1.00326, 1.00237, 1.00099, 1, 0.999199, 0.998257, 0.997402, 0.996588, 0.996552, 0.994895, 0.994139, 0.993378, 0.993697, 0.992974, 0.991203, 0.991464, 0.990763, 0.989038, 0.988297, 0.987556, 0.98695, 0.986321, 0.985562, 0.985065, 0.984541, 0.983914, 0.983367, 0.982815, 0.982358, 0.981685, 0.981209, 0.980574, 0.980179, 0.979823, 0.979318, 0.978743, 0.978194, 0.977835, 0.977269, 0.976837, 0.976572, 0.976085, 0.97577, 0.975498, 0.974878, 0.974535, 0.974313, 0.973911, 0.973495, 0.973128, 0.972841, 0.972432, 0.972194, 0.971711, 0.971514, 0.971218, 0.970893, 0.970424, 0.970317, 0.970032, 0.969677, 0.969653, 0.969334, 0.969158, 0.968831, 0.968603, 0.968332, 0.968033, 0.967919, 0.967465, 0.967557, 0.967276, 0.967139, 0.966992, 0.967087, 0.966635, 0.966532, 0.966512, 0.966636, 0.966294, 0.96663, 0.966156, 0.965915, 0.966077, 0.966152, 0.965633, 0.965681, 0.965914, 0.965834, 0.965507, 0.965735, 0.965142, 0.965452, 0.965173, 0.965165, 0.965162, 0.965309, 0.965409, 0.965411, 0.965373, 0.965075, 0.965174, 0.964838, 0.965202, 0.965066, 0.964948, 0.965023, 0.965116, 0.964691, 0.964722, 0.96478, 0.964417, 0.964444, 0.964347, 0.96443, 0.9641, 0.964536, 0.964705, 0.964424, 0.96452, 0.963932, 0.964938, 0.964125, 0.96424, 0.963785, 0.963799, 0.96371, 0.963628, 0.963629, 0.96309, 0.963742, 0.96324, 0.963495, 0.965155, 0.965398, 0.965437, 0.965501, 0.965788, 0.965418, 0.965984, 0.965232, 0.960971, 0.961233, 0.965965, 0.966091, 0.966415, 0.966672, 0.962046, 0.966642, 0.965852, 0.963053, 0.96715, 0.967128, 0.966051, 0.961305, 0.961779, 0.96097, 0.962654, 0.96404, 0.963379, 0.962127, 0.963771, 0.960475, 0.961214, 0.961883, 0.961425, 0.963812, 0.962941, 0.962026, 0.96071, 0.960938, 0.960853, 0.961818, 0.961053, 0.960728, 0.960697, 0.96142, 0.961597, 0.961022, 0.961154, 0.961453, 0.962283, 0.961901, 0.962362, 0.961822, 0.96221};

    double pointwise_1sig_3p5[410] = {4.66151, 4.66151, 4.66151, 4.66151, 4.66151, 4.66151, 4.66151, 4.66151, 4.66151, 4.66151, 4.66151, 4.52168, 4.05406, 3.98581, 3.94458, 3.89503, 3.84764, 3.80412, 3.75836, 3.70546, 3.64633, 3.5835, 3.51865, 3.45331, 3.38948, 3.32693, 3.26533, 3.2051, 3.14632, 3.08904, 3.03344, 2.97948, 2.92722, 2.87639, 2.82721, 2.77952, 2.7332, 2.68833, 2.64487, 2.60267, 2.56173, 2.52202, 2.48341, 2.44591, 2.40962, 2.37432, 2.34, 2.3067, 2.27431, 2.24279, 2.21215, 2.18248, 2.15346, 2.12526, 2.09779, 2.0711, 2.04513, 2.01976, 1.99507, 1.97114, 1.94775, 1.92506, 1.90286, 1.88113, 1.86008, 1.83934, 1.81914, 1.7995, 1.7804, 1.76151, 1.74327, 1.72545, 1.70802, 1.6911, 1.67456, 1.65847, 1.64283, 1.62756, 1.61266, 1.59816, 1.58405, 1.57026, 1.55675, 1.54366, 1.53085, 1.5183, 1.50606, 1.49407, 1.48239, 1.4713, 1.46054, 1.44992, 1.4396, 1.4295, 1.41954, 1.40981, 1.40034, 1.39101, 1.38189, 1.37302, 1.3643, 1.35579, 1.34739, 1.33927, 1.33123, 1.32344, 1.31576, 1.30831, 1.30089, 1.29378, 1.28671, 1.27983, 1.27309, 1.26634, 1.2599, 1.25341, 1.24711, 1.24086, 1.23467, 1.22873, 1.22286, 1.21681, 1.21097, 1.20535, 1.19949, 1.19385, 1.18813, 1.18262, 1.1771, 1.17147, 1.16601, 1.16046, 1.15513, 1.14955, 1.14444, 1.13909, 1.13402, 1.12899, 1.12393, 1.11911, 1.11448, 1.10998, 1.10554, 1.1012, 1.09713, 1.09308, 1.08929, 1.08527, 1.08151, 1.07805, 1.07439, 1.071, 1.06777, 1.06438, 1.06133, 1.05803, 1.05494, 1.05203, 1.04906, 1.04622, 1.04354, 1.04051, 1.03778, 1.03521, 1.03263, 1.03009, 1.02762, 1.02521, 1.02237, 1.02005, 1.01782, 1.0156, 1.01329, 1.0112, 1.00906, 1.00703, 1.0046, 1.00259, 1.00063, 0.998734, 0.996791, 0.994919, 0.993164, 0.991338, 0.989607, 0.987928, 0.985604, 0.983918, 0.982322, 0.980645, 0.979018, 0.977464, 0.975922, 0.974477, 0.972981, 0.971508, 0.970093, 0.968612, 0.967346, 0.96533, 0.963951, 0.962616, 0.961408, 0.960063, 0.958733, 0.957526, 0.956321, 0.955127, 0.953849, 0.952675, 0.951537, 0.950414, 0.949235, 0.948167, 0.94711, 0.94608, 0.945096, 0.943926, 0.942508, 0.941498, 0.940485, 0.939645, 0.938692, 0.937712, 0.936712, 0.935829, 0.935082, 0.934119, 0.933318, 0.932489, 0.931614, 0.930797, 0.929894, 0.9292, 0.928364, 0.927679, 0.926805, 0.926014, 0.925462, 0.924599, 0.923938, 0.923473, 0.922791, 0.921972, 0.921418, 0.920765, 0.92009, 0.919604, 0.918915, 0.918438, 0.917761, 0.917254, 0.916658, 0.916148, 0.915657, 0.915, 0.914489, 0.914085, 0.9136, 0.913079, 0.91258, 0.912131, 0.911592, 0.910719, 0.910407, 0.909788, 0.909502, 0.908975, 0.908555, 0.908044, 0.907767, 0.907421, 0.907007, 0.906551, 0.90624, 0.905897, 0.905578, 0.905001, 0.90487, 0.90442, 0.904129, 0.903653, 0.903353, 0.903134, 0.90275, 0.902597, 0.902348, 0.902075, 0.901663, 0.901394, 0.901097, 0.900836, 0.900578, 0.900152, 0.900046, 0.899915, 0.899641, 0.899354, 0.899364, 0.898931, 0.898692, 0.898612, 0.898372, 0.898107, 0.898143, 0.897878, 0.89765, 0.897519, 0.897255, 0.897056, 0.897068, 0.896817, 0.8968, 0.89645, 0.89652, 0.896179, 0.896322, 0.896065, 0.896026, 0.895792, 0.895953, 0.895561, 0.895647, 0.895562, 0.895283, 0.895336, 0.895122, 0.895276, 0.895066, 0.894948, 0.895023, 0.895116, 0.894691, 0.894722, 0.89478, 0.894417, 0.894444, 0.894347, 0.89443, 0.8941, 0.894536, 0.894705, 0.894424, 0.89452, 0.893932, 0.894938, 0.894125, 0.89424, 0.893785, 0.893799, 0.89371, 0.893628, 0.893629, 0.89309, 0.893742, 0.89324, 0.893495, 0.895155, 0.895398, 0.895437, 0.895501, 0.895788, 0.895418, 0.895984, 0.895232, 0.890971, 0.891233, 0.895965, 0.896091, 0.896415, 0.896672, 0.892046, 0.896642, 0.895852, 0.893053, 0.89715, 0.897128, 0.896051, 0.891305, 0.891779, 0.89097, 0.892654, 0.89404, 0.893379, 0.892127, 0.893771, 0.890475, 0.891214, 0.891883, 0.891425, 0.893812, 0.892941, 0.892026, 0.89071, 0.890938, 0.890853, 0.891818, 0.891053, 0.890728, 0.890697, 0.89142, 0.891597, 0.891022, 0.891154, 0.891453, 0.892283, 0.891901, 0.892362, 0.891822, 0.89221};


    const int numPoints_3p5 = 410;
    TGraph* mean_graph = new TGraph(numPoints_3p5 ,pointwise_momentum_3p5,pointwise_mean_3p5);
    TGraph* sig1_graph = new TGraph(numPoints_3p5 ,pointwise_momentum_3p5,pointwise_1sig_3p5);

    Double_t calculateNsigma(double lndedx, double momentum, int nHitsDedx)
    {
      Double_t nSigmaProton = 999;
      Double_t shiftValue   = mean_graph->Eval(momentum);
      Double_t stretchValue = sig1_graph->Eval(momentum);

      // Now shift and stretch ln(de/dx) to get nSigmaProton 
      Double_t shiftedLnDedx = lndedx-shiftValue;
      nSigmaProton = shiftedLnDedx/(shiftValue-stretchValue);

      // Reject tracks with the following traits 
      //if(nHitsDedx<20) nSigmaProton = 999;
      //if(momentum<0.12 || momentum > 10.0) nSigmaProton = 999;
      return nSigmaProton;
    }
  };// End NewNSigmaProton3p5GeV_SL23d



  struct NewNSigmaProton3p9GeV_SL23d
  {
    double pointwise_momentum_3p9[460] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195, 0.205, 0.215, 0.225, 0.235, 0.245, 0.255, 0.265, 0.275, 0.285, 0.295, 0.305, 0.315, 0.325, 0.335, 0.345, 0.355, 0.365, 0.375, 0.385, 0.395, 0.405, 0.415, 0.425, 0.435, 0.445, 0.455, 0.465, 0.475, 0.485, 0.495, 0.505, 0.515, 0.525, 0.535, 0.545, 0.555, 0.565, 0.575, 0.585, 0.595, 0.605, 0.615, 0.625, 0.635, 0.645, 0.655, 0.665, 0.675, 0.685, 0.695, 0.705, 0.715, 0.725, 0.735, 0.745, 0.755, 0.765, 0.775, 0.785, 0.795, 0.805, 0.815, 0.825, 0.835, 0.845, 0.855, 0.865, 0.875, 0.885, 0.895, 0.905, 0.915, 0.925, 0.935, 0.945, 0.955, 0.965, 0.975, 0.985, 0.995, 1.005, 1.015, 1.025, 1.035, 1.045, 1.055, 1.065, 1.075, 1.085, 1.095, 1.105, 1.115, 1.125, 1.135, 1.145, 1.155, 1.165, 1.175, 1.185, 1.195, 1.205, 1.215, 1.225, 1.235, 1.245, 1.255, 1.265, 1.275, 1.285, 1.295, 1.305, 1.315, 1.325, 1.335, 1.345, 1.355, 1.365, 1.375, 1.385, 1.395, 1.405, 1.415, 1.425, 1.435, 1.445, 1.455, 1.465, 1.475, 1.485, 1.495, 1.505, 1.515, 1.525, 1.535, 1.545, 1.555, 1.565, 1.575, 1.585, 1.595, 1.605, 1.615, 1.625, 1.635, 1.645, 1.655, 1.665, 1.675, 1.685, 1.695, 1.705, 1.715, 1.725, 1.735, 1.745, 1.755, 1.765, 1.775, 1.785, 1.795, 1.805, 1.815, 1.825, 1.835, 1.845, 1.855, 1.865, 1.875, 1.885, 1.895, 1.905, 1.915, 1.925, 1.935, 1.945, 1.955, 1.965, 1.975, 1.985, 1.995, 2.005, 2.015, 2.025, 2.035, 2.045, 2.055, 2.065, 2.075, 2.085, 2.095, 2.105, 2.115, 2.125, 2.135, 2.145, 2.155, 2.165, 2.175, 2.185, 2.195, 2.205, 2.215, 2.225, 2.235, 2.245, 2.255, 2.265, 2.275, 2.285, 2.295, 2.305, 2.315, 2.325, 2.335, 2.345, 2.355, 2.365, 2.375, 2.385, 2.395, 2.405, 2.415, 2.425, 2.435, 2.445, 2.455, 2.465, 2.475, 2.485, 2.495, 2.505, 2.515, 2.525, 2.535, 2.545, 2.555, 2.565, 2.575, 2.585, 2.595, 2.605, 2.615, 2.625, 2.635, 2.645, 2.655, 2.665, 2.675, 2.685, 2.695, 2.705, 2.715, 2.725, 2.735, 2.745, 2.755, 2.765, 2.775, 2.785, 2.795, 2.805, 2.815, 2.825, 2.835, 2.845, 2.855, 2.865, 2.875, 2.885, 2.895, 2.905, 2.915, 2.925, 2.935, 2.945, 2.955, 2.965, 2.975, 2.985, 2.995, 3.005, 3.015, 3.025, 3.035, 3.045, 3.055, 3.065, 3.075, 3.085, 3.095, 3.105, 3.115, 3.125, 3.135, 3.145, 3.155, 3.165, 3.175, 3.185, 3.195, 3.205, 3.215, 3.225, 3.235, 3.245, 3.255, 3.265, 3.275, 3.285, 3.295, 3.305, 3.315, 3.325, 3.335, 3.345, 3.355, 3.365, 3.375, 3.385, 3.395, 3.405, 3.415, 3.425, 3.435, 3.445, 3.455, 3.465, 3.475, 3.485, 3.495, 3.505, 3.515, 3.525, 3.535, 3.545, 3.555, 3.565, 3.575, 3.585, 3.595, 3.605, 3.615, 3.625, 3.635, 3.645, 3.655, 3.665, 3.675, 3.685, 3.695, 3.705, 3.715, 3.725, 3.735, 3.745, 3.755, 3.765, 3.775, 3.785, 3.795, 3.805, 3.815, 3.825, 3.835, 3.845, 3.855, 3.865, 3.875, 3.885, 3.895, 3.905, 3.915, 3.925, 3.935, 3.945, 3.955, 3.965, 3.975, 3.985, 3.995, 4.005, 4.015, 4.025, 4.035, 4.045, 4.055, 4.065, 4.075, 4.085, 4.095, 4.105, 4.115, 4.125, 4.135, 4.145, 4.155, 4.165, 4.175, 4.185, 4.195, 4.205, 4.215, 4.225, 4.235, 4.245, 4.255, 4.265, 4.275, 4.285, 4.295, 4.305, 4.315, 4.325, 4.335, 4.345, 4.355, 4.365, 4.375, 4.385, 4.395, 4.405, 4.415, 4.425, 4.435, 4.445, 4.455, 4.465, 4.475, 4.485, 4.495, 4.505, 4.515, 4.525, 4.535, 4.545, 4.555, 4.565, 4.575, 4.585, 4.595};

    double pointwise_mean_3p9[460] = {4.71059, 4.71059, 4.71059, 4.71059, 4.71059, 4.71059, 4.71059, 4.71059, 4.71059, 4.71059, 4.71059, 4.579, 4.11235, 4.06502, 4.01989, 3.96991, 3.92202, 3.87545, 3.82579, 3.77122, 3.7125, 3.65111, 3.58816, 3.52468, 3.46142, 3.39867, 3.33703, 3.27646, 3.21754, 3.16015, 3.10439, 3.05034, 2.99795, 2.94705, 2.89774, 2.84998, 2.80372, 2.75878, 2.71528, 2.67312, 2.63217, 2.59239, 2.55386, 2.51633, 2.48003, 2.44478, 2.4104, 2.37709, 2.3447, 2.31319, 2.28255, 2.25289, 2.22385, 2.19574, 2.16823, 2.14161, 2.11566, 2.09023, 2.06559, 2.04169, 2.01828, 1.99563, 1.97337, 1.95166, 1.93066, 1.90994, 1.88975, 1.87005, 1.85091, 1.832, 1.8137, 1.7958, 1.77832, 1.76136, 1.74471, 1.72862, 1.71289, 1.69762, 1.68267, 1.66809, 1.65407, 1.64032, 1.62678, 1.61378, 1.60097, 1.58852, 1.57626, 1.56438, 1.5527, 1.54133, 1.53014, 1.51923, 1.50859, 1.49814, 1.48787, 1.4779, 1.46811, 1.45861, 1.44924, 1.4402, 1.43125, 1.42229, 1.41378, 1.40538, 1.39723, 1.38934, 1.3815, 1.37375, 1.36632, 1.35894, 1.35163, 1.34458, 1.33765, 1.33102, 1.32429, 1.31773, 1.31129, 1.30522, 1.29893, 1.29284, 1.28675, 1.28098, 1.27518, 1.26934, 1.26385, 1.25813, 1.25265, 1.24713, 1.24166, 1.23629, 1.23095, 1.22557, 1.22023, 1.21499, 1.2098, 1.20462, 1.19943, 1.1945, 1.18948, 1.18455, 1.17994, 1.17536, 1.17095, 1.16646, 1.16214, 1.15824, 1.15406, 1.15017, 1.14646, 1.14273, 1.13913, 1.1356, 1.13217, 1.12885, 1.1255, 1.12225, 1.11911, 1.11596, 1.11303, 1.11021, 1.10725, 1.10432, 1.10153, 1.09877, 1.0962, 1.09368, 1.09108, 1.08872, 1.0861, 1.08358, 1.08128, 1.07896, 1.07675, 1.07457, 1.07247, 1.07039, 1.06816, 1.06616, 1.0641, 1.06216, 1.06033, 1.05851, 1.05666, 1.05495, 1.0532, 1.05152, 1.04957, 1.04794, 1.04627, 1.04475, 1.04319, 1.04166, 1.04017, 1.03862, 1.03714, 1.03578, 1.03435, 1.03288, 1.03156, 1.03013, 1.02879, 1.02738, 1.02626, 1.02495, 1.02386, 1.02258, 1.02136, 1.02022, 1.01919, 1.018, 1.01689, 1.01582, 1.01472, 1.01365, 1.01263, 1.01163, 1.0106, 1.00964, 1.00845, 1.00735, 1.0066, 1.00537, 1.00471, 1.00348, 1.00281, 1.00157, 1.00113, 0.99974, 0.998841, 0.998637, 0.997856, 0.99667, 0.996265, 0.995458, 0.994701, 0.994105, 0.992337, 0.991516, 0.990778, 0.990006, 0.989238, 0.988637, 0.987939, 0.98714, 0.986468, 0.985831, 0.985154, 0.984685, 0.984139, 0.983335, 0.982877, 0.982328, 0.981749, 0.981294, 0.98066, 0.980156, 0.979698, 0.979128, 0.978743, 0.978167, 0.977688, 0.977384, 0.976867, 0.976531, 0.976122, 0.975592, 0.975239, 0.974832, 0.974526, 0.974122, 0.973718, 0.973341, 0.973034, 0.972675, 0.972254, 0.971971, 0.971553, 0.971326, 0.970833, 0.970651, 0.970475, 0.970168, 0.969833, 0.969509, 0.969341, 0.969006, 0.968857, 0.968522, 0.968419, 0.968253, 0.967787, 0.96759, 0.967322, 0.967144, 0.966936, 0.966973, 0.9667, 0.966414, 0.966286, 0.966239, 0.96597, 0.96603, 0.965712, 0.96561, 0.965859, 0.965959, 0.965675, 0.965681, 0.965646, 0.965345, 0.965358, 0.965226, 0.965021, 0.965071, 0.96474, 0.965046, 0.964372, 0.964548, 0.964421, 0.964763, 0.964458, 0.964571, 0.964423, 0.964266, 0.964336, 0.964361, 0.963985, 0.9639, 0.963992, 0.964117, 0.96389, 0.963807, 0.963887, 0.963903, 0.963582, 0.963538, 0.963457, 0.963467, 0.96308, 0.963106, 0.963682, 0.963557, 0.963517, 0.963232, 0.963374, 0.963075, 0.963158, 0.962957, 0.963152, 0.962797, 0.96277, 0.962549, 0.962485, 0.963187, 0.962707, 0.961668, 0.962099, 0.964163, 0.964001, 0.964167, 0.964285, 0.964024, 0.96404, 0.96427, 0.964407, 0.964171, 0.961397, 0.964318, 0.961244, 0.964757, 0.961948, 0.964793, 0.964742, 0.96488, 0.961394, 0.964961, 0.964789, 0.961759, 0.964846, 0.962042, 0.962425, 0.961439, 0.960887, 0.961772, 0.963044, 0.962864, 0.961657, 0.960968, 0.960279, 0.961776, 0.960199, 0.961387, 0.960446, 0.960195, 0.959524, 0.960634, 0.960434, 0.960635, 0.960618, 0.960422, 0.960869, 0.960478, 0.960595, 0.960986, 0.961297, 0.961357, 0.961532, 0.961163, 0.961954, 0.961397, 0.961894, 0.961915, 0.961802, 0.960937, 0.962033, 0.961523, 0.961086, 0.961949, 0.96132, 0.962154, 0.962386, 0.962775, 0.962123, 0.962435, 0.962626, 0.962975, 0.96248, 0.962496, 0.9628, 0.963033, 0.962547, 0.961913, 0.96371, 0.962818, 0.962653, 0.962908, 0.96272, 0.9702, 0.963664, 0.963708, 0.970474, 0.963664, 0.970542, 0.963175, 0.963834, 0.963925, 0.963626, 0.963636, 0.963626, 0.971439, 0.970863, 0.971267, 0.971398, 0.971381, 0.971696, 0.971594, 0.971471, 0.971858, 0.972285, 0.972147};

    double pointwise_1sig_3p9[460] = {4.66206, 4.66206, 4.66206, 4.66206, 4.66206, 4.66206, 4.66206, 4.66206, 4.66206, 4.66206, 4.66206, 4.509, 4.04636, 3.99502, 3.94989, 3.89991, 3.85202, 3.80819, 3.76212, 3.70854, 3.64895, 3.58577, 3.52081, 3.45513, 3.39142, 3.32867, 3.26703, 3.20646, 3.14754, 3.09015, 3.03439, 2.98034, 2.92795, 2.87705, 2.82774, 2.77998, 2.73372, 2.68878, 2.64528, 2.60312, 2.56217, 2.52239, 2.48386, 2.44633, 2.41003, 2.37478, 2.3404, 2.30709, 2.2747, 2.24319, 2.21255, 2.18289, 2.15385, 2.12574, 2.09823, 2.07161, 2.04566, 2.02023, 1.99559, 1.97169, 1.94828, 1.92563, 1.90337, 1.88166, 1.86066, 1.83994, 1.81975, 1.80005, 1.78091, 1.762, 1.7437, 1.7258, 1.70832, 1.69136, 1.67471, 1.65862, 1.64289, 1.62762, 1.61267, 1.59809, 1.58407, 1.57032, 1.55678, 1.54378, 1.53097, 1.51852, 1.50626, 1.49438, 1.4827, 1.47133, 1.46057, 1.45014, 1.4399, 1.42983, 1.42005, 1.41045, 1.40094, 1.39175, 1.3827, 1.37393, 1.36524, 1.35678, 1.34844, 1.34038, 1.33253, 1.32469, 1.31709, 1.30961, 1.30238, 1.29523, 1.28815, 1.2814, 1.27472, 1.26801, 1.26151, 1.25513, 1.24888, 1.24262, 1.23656, 1.23066, 1.22472, 1.21865, 1.21288, 1.20716, 1.20129, 1.19559, 1.18964, 1.18406, 1.17844, 1.17238, 1.16693, 1.1609, 1.15517, 1.14929, 1.14385, 1.13792, 1.13237, 1.12686, 1.1214, 1.11584, 1.11106, 1.1062, 1.10174, 1.09694, 1.09259, 1.08873, 1.08463, 1.08067, 1.07697, 1.07348, 1.06989, 1.06655, 1.06325, 1.06003, 1.05704, 1.05378, 1.05079, 1.04798, 1.04512, 1.0425, 1.03996, 1.03698, 1.03419, 1.03187, 1.02939, 1.02701, 1.02451, 1.02236, 1.0195, 1.01721, 1.01504, 1.01272, 1.01064, 1.00862, 1.00656, 1.00457, 1.00206, 1.00026, 0.998206, 0.996324, 0.994579, 0.992741, 0.990908, 0.989213, 0.987532, 0.985889, 0.983444, 0.981939, 0.980303, 0.978701, 0.977162, 0.975645, 0.97416, 0.972617, 0.971064, 0.969678, 0.968288, 0.966829, 0.965462, 0.963571, 0.962214, 0.960757, 0.959641, 0.958281, 0.95708, 0.95583, 0.954546, 0.953387, 0.952289, 0.951098, 0.949989, 0.948918, 0.947718, 0.946551, 0.945591, 0.944543, 0.943446, 0.942485, 0.94096, 0.940015, 0.939064, 0.937969, 0.937087, 0.93629, 0.935286, 0.934389, 0.933468, 0.932838, 0.931825, 0.930895, 0.930269, 0.929373, 0.928616, 0.927609, 0.92685, 0.926242, 0.92569, 0.924844, 0.924104, 0.923403, 0.922758, 0.922136, 0.921424, 0.920661, 0.920023, 0.919432, 0.918787, 0.918438, 0.91784, 0.917162, 0.916685, 0.916017, 0.915488, 0.915025, 0.914438, 0.913909, 0.913396, 0.91296, 0.912425, 0.911983, 0.911406, 0.911061, 0.910567, 0.909682, 0.909234, 0.908824, 0.908438, 0.90796, 0.907592, 0.907175, 0.906758, 0.906311, 0.906071, 0.905634, 0.905222, 0.904861, 0.904524, 0.904207, 0.903704, 0.903389, 0.903154, 0.902845, 0.90252, 0.902063, 0.901818, 0.901718, 0.90111, 0.90101, 0.900754, 0.900749, 0.900279, 0.899945, 0.899678, 0.899347, 0.898991, 0.898922, 0.898727, 0.898388, 0.898364, 0.898093, 0.897814, 0.897631, 0.897336, 0.897221, 0.897058, 0.89705, 0.89685, 0.89675, 0.896471, 0.89628, 0.896049, 0.89601, 0.895651, 0.895597, 0.895449, 0.895286, 0.895179, 0.894963, 0.894937, 0.894763, 0.894836, 0.894571, 0.894524, 0.894319, 0.894336, 0.894361, 0.893985, 0.8939, 0.893992, 0.894117, 0.89389, 0.893807, 0.893887, 0.893903, 0.893582, 0.893538, 0.893457, 0.893467, 0.89308, 0.893106, 0.893682, 0.893557, 0.893517, 0.893232, 0.893374, 0.893075, 0.893158, 0.892957, 0.893152, 0.892797, 0.89277, 0.892549, 0.892485, 0.893187, 0.892707, 0.891668, 0.892099, 0.894163, 0.894001, 0.894167, 0.894285, 0.894024, 0.89404, 0.89427, 0.894407, 0.894171, 0.891397, 0.894318, 0.891244, 0.894757, 0.891948, 0.894793, 0.894742, 0.89488, 0.891394, 0.894961, 0.894789, 0.891759, 0.894846, 0.892042, 0.892425, 0.891439, 0.890887, 0.891772, 0.893044, 0.892864, 0.891657, 0.890968, 0.890279, 0.891776, 0.890199, 0.891387, 0.890446, 0.890195, 0.889524, 0.890634, 0.890434, 0.890635, 0.890618, 0.890422, 0.890869, 0.890478, 0.890595, 0.890986, 0.891297, 0.891357, 0.891532, 0.891163, 0.891954, 0.891397, 0.891894, 0.891915, 0.891802, 0.890937, 0.892033, 0.891523, 0.891086, 0.891949, 0.89132, 0.892154, 0.892386, 0.892775, 0.892123, 0.892435, 0.892626, 0.892975, 0.89248, 0.892496, 0.8928, 0.893033, 0.892547, 0.891913, 0.89371, 0.892818, 0.892653, 0.892908, 0.89272, 0.9002, 0.893664, 0.893708, 0.900474, 0.893664, 0.900542, 0.893175, 0.893834, 0.893925, 0.893626, 0.893636, 0.893626, 0.901439, 0.900863, 0.901267, 0.901398, 0.901381, 0.901696, 0.901594, 0.901471, 0.901858, 0.902285, 0.902147};


    const int numPoints_3p9 = 460;
    TGraph* mean_graph = new TGraph(numPoints_3p9 ,pointwise_momentum_3p9,pointwise_mean_3p9);
    TGraph* sig1_graph = new TGraph(numPoints_3p9 ,pointwise_momentum_3p9,pointwise_1sig_3p9);

    Double_t calculateNsigma(double lndedx, double momentum, int nHitsDedx)
    {
      Double_t nSigmaProton = 999;
      Double_t shiftValue   = mean_graph->Eval(momentum);
      Double_t stretchValue = sig1_graph->Eval(momentum);

      // Now shift and stretch ln(de/dx) to get nSigmaProton 
      Double_t shiftedLnDedx = lndedx-shiftValue;
      nSigmaProton = shiftedLnDedx/(shiftValue-stretchValue);

      // Reject tracks with the following traits 
      //if(nHitsDedx<20) nSigmaProton = 999;
      //if(momentum<0.12 || momentum > 10.0) nSigmaProton = 999;
      return nSigmaProton;
    }
  };// End NewNSigmaProton3p9GeV_SL23d



  struct NewNSigmaProton4p5GeV_SL23d
  {
    double pointwise_momentum_4p5[530] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195, 0.205, 0.215, 0.225, 0.235, 0.245, 0.255, 0.265, 0.275, 0.285, 0.295, 0.305, 0.315, 0.325, 0.335, 0.345, 0.355, 0.365, 0.375, 0.385, 0.395, 0.405, 0.415, 0.425, 0.435, 0.445, 0.455, 0.465, 0.475, 0.485, 0.495, 0.505, 0.515, 0.525, 0.535, 0.545, 0.555, 0.565, 0.575, 0.585, 0.595, 0.605, 0.615, 0.625, 0.635, 0.645, 0.655, 0.665, 0.675, 0.685, 0.695, 0.705, 0.715, 0.725, 0.735, 0.745, 0.755, 0.765, 0.775, 0.785, 0.795, 0.805, 0.815, 0.825, 0.835, 0.845, 0.855, 0.865, 0.875, 0.885, 0.895, 0.905, 0.915, 0.925, 0.935, 0.945, 0.955, 0.965, 0.975, 0.985, 0.995, 1.005, 1.015, 1.025, 1.035, 1.045, 1.055, 1.065, 1.075, 1.085, 1.095, 1.105, 1.115, 1.125, 1.135, 1.145, 1.155, 1.165, 1.175, 1.185, 1.195, 1.205, 1.215, 1.225, 1.235, 1.245, 1.255, 1.265, 1.275, 1.285, 1.295, 1.305, 1.315, 1.325, 1.335, 1.345, 1.355, 1.365, 1.375, 1.385, 1.395, 1.405, 1.415, 1.425, 1.435, 1.445, 1.455, 1.465, 1.475, 1.485, 1.495, 1.505, 1.515, 1.525, 1.535, 1.545, 1.555, 1.565, 1.575, 1.585, 1.595, 1.605, 1.615, 1.625, 1.635, 1.645, 1.655, 1.665, 1.675, 1.685, 1.695, 1.705, 1.715, 1.725, 1.735, 1.745, 1.755, 1.765, 1.775, 1.785, 1.795, 1.805, 1.815, 1.825, 1.835, 1.845, 1.855, 1.865, 1.875, 1.885, 1.895, 1.905, 1.915, 1.925, 1.935, 1.945, 1.955, 1.965, 1.975, 1.985, 1.995, 2.005, 2.015, 2.025, 2.035, 2.045, 2.055, 2.065, 2.075, 2.085, 2.095, 2.105, 2.115, 2.125, 2.135, 2.145, 2.155, 2.165, 2.175, 2.185, 2.195, 2.205, 2.215, 2.225, 2.235, 2.245, 2.255, 2.265, 2.275, 2.285, 2.295, 2.305, 2.315, 2.325, 2.335, 2.345, 2.355, 2.365, 2.375, 2.385, 2.395, 2.405, 2.415, 2.425, 2.435, 2.445, 2.455, 2.465, 2.475, 2.485, 2.495, 2.505, 2.515, 2.525, 2.535, 2.545, 2.555, 2.565, 2.575, 2.585, 2.595, 2.605, 2.615, 2.625, 2.635, 2.645, 2.655, 2.665, 2.675, 2.685, 2.695, 2.705, 2.715, 2.725, 2.735, 2.745, 2.755, 2.765, 2.775, 2.785, 2.795, 2.805, 2.815, 2.825, 2.835, 2.845, 2.855, 2.865, 2.875, 2.885, 2.895, 2.905, 2.915, 2.925, 2.935, 2.945, 2.955, 2.965, 2.975, 2.985, 2.995, 3.005, 3.015, 3.025, 3.035, 3.045, 3.055, 3.065, 3.075, 3.085, 3.095, 3.105, 3.115, 3.125, 3.135, 3.145, 3.155, 3.165, 3.175, 3.185, 3.195, 3.205, 3.215, 3.225, 3.235, 3.245, 3.255, 3.265, 3.275, 3.285, 3.295, 3.305, 3.315, 3.325, 3.335, 3.345, 3.355, 3.365, 3.375, 3.385, 3.395, 3.405, 3.415, 3.425, 3.435, 3.445, 3.455, 3.465, 3.475, 3.485, 3.495, 3.505, 3.515, 3.525, 3.535, 3.545, 3.555, 3.565, 3.575, 3.585, 3.595, 3.605, 3.615, 3.625, 3.635, 3.645, 3.655, 3.665, 3.675, 3.685, 3.695, 3.705, 3.715, 3.725, 3.735, 3.745, 3.755, 3.765, 3.775, 3.785, 3.795, 3.805, 3.815, 3.825, 3.835, 3.845, 3.855, 3.865, 3.875, 3.885, 3.895, 3.905, 3.915, 3.925, 3.935, 3.945, 3.955, 3.965, 3.975, 3.985, 3.995, 4.005, 4.015, 4.025, 4.035, 4.045, 4.055, 4.065, 4.075, 4.085, 4.095, 4.105, 4.115, 4.125, 4.135, 4.145, 4.155, 4.165, 4.175, 4.185, 4.195, 4.205, 4.215, 4.225, 4.235, 4.245, 4.255, 4.265, 4.275, 4.285, 4.295, 4.305, 4.315, 4.325, 4.335, 4.345, 4.355, 4.365, 4.375, 4.385, 4.395, 4.405, 4.415, 4.425, 4.435, 4.445, 4.455, 4.465, 4.475, 4.485, 4.495, 4.505, 4.515, 4.525, 4.535, 4.545, 4.555, 4.565, 4.575, 4.585, 4.595, 4.605, 4.615, 4.625, 4.635, 4.645, 4.655, 4.665, 4.675, 4.685, 4.695, 4.705, 4.715, 4.725, 4.735, 4.745, 4.755, 4.765, 4.775, 4.785, 4.795, 4.805, 4.815, 4.825, 4.835, 4.845, 4.855, 4.865, 4.875, 4.885, 4.895, 4.905, 4.915, 4.925, 4.935, 4.945, 4.955, 4.965, 4.975, 4.985, 4.995, 5.005, 5.015, 5.025, 5.035, 5.045, 5.055, 5.065, 5.075, 5.085, 5.095, 5.105, 5.115, 5.125, 5.135, 5.145, 5.155, 5.165, 5.175, 5.185, 5.195, 5.205, 5.215, 5.225, 5.235, 5.245, 5.255, 5.265, 5.275, 5.285, 5.295};


    double pointwise_mean_4p5[530] = {4.71028, 4.71028, 4.71028, 4.71028, 4.71028, 4.71028, 4.71028, 4.71028, 4.71028, 4.71028, 4.71028, 4.6268, 4.11235, 4.0235, 3.98597, 3.94861, 3.9117, 3.87316, 3.82786, 3.77532, 3.71721, 3.65555, 3.59221, 3.52821, 3.46448, 3.40138, 3.33943, 3.2787, 3.21956, 3.16218, 3.10631, 3.05215, 2.99956, 2.94874, 2.89938, 2.85161, 2.80515, 2.7602, 2.71655, 2.67435, 2.63335, 2.59353, 2.5549, 2.51737, 2.48103, 2.44575, 2.41126, 2.37798, 2.34556, 2.31401, 2.28338, 2.25366, 2.22462, 2.19648, 2.16893, 2.14227, 2.11633, 2.09085, 2.06628, 2.04224, 2.01889, 1.99624, 1.97398, 1.95229, 1.93126, 1.91058, 1.89036, 1.87071, 1.85152, 1.83251, 1.81423, 1.79627, 1.77873, 1.76163, 1.74493, 1.72869, 1.71289, 1.69758, 1.68263, 1.66803, 1.65405, 1.64024, 1.62678, 1.61383, 1.60107, 1.58872, 1.57656, 1.56476, 1.55316, 1.54192, 1.53085, 1.5201, 1.50951, 1.49922, 1.48906, 1.47916, 1.46953, 1.46003, 1.45087, 1.44183, 1.43302, 1.42421, 1.41577, 1.4075, 1.39942, 1.39168, 1.38391, 1.37633, 1.36896, 1.36168, 1.35457, 1.34759, 1.34072, 1.33421, 1.32764, 1.32122, 1.31486, 1.30885, 1.30272, 1.29665, 1.29065, 1.28502, 1.27926, 1.27348, 1.268, 1.2623, 1.25687, 1.25129, 1.24573, 1.24029, 1.23457, 1.22905, 1.2233, 1.21759, 1.21186, 1.20609, 1.20033, 1.19512, 1.19008, 1.18517, 1.18013, 1.17545, 1.17065, 1.16619, 1.16154, 1.15725, 1.15282, 1.14882, 1.14501, 1.14092, 1.13727, 1.13347, 1.13001, 1.12661, 1.12323, 1.12002, 1.11697, 1.11393, 1.11107, 1.10826, 1.10552, 1.10265, 1.10008, 1.09746, 1.09497, 1.09247, 1.09007, 1.08783, 1.08528, 1.08305, 1.08083, 1.07874, 1.07661, 1.07462, 1.07263, 1.07063, 1.06858, 1.06672, 1.06493, 1.06315, 1.06133, 1.05972, 1.05807, 1.05641, 1.05481, 1.05323, 1.05153, 1.05, 1.04847, 1.04699, 1.0456, 1.04416, 1.04286, 1.04142, 1.04015, 1.0388, 1.03756, 1.0363, 1.035, 1.03368, 1.03246, 1.03124, 1.03009, 1.02885, 1.02806, 1.02685, 1.02576, 1.02455, 1.02356, 1.02258, 1.0216, 1.0205, 1.01949, 1.0185, 1.0176, 1.01658, 1.01536, 1.01432, 1.01333, 1.01233, 1.01127, 1.01042, 1.00951, 1.00827, 1.00747, 1.00651, 1.00562, 1.00475, 1.00389, 1.00305, 1.00202, 1.00116, 1.00226, 0.999474, 0.998753, 0.997949, 0.997143, 0.996536, 0.995621, 0.994817, 0.994199, 0.993504, 0.992748, 0.99191, 0.991414, 0.990774, 0.990045, 0.98865, 0.988106, 0.98742, 0.986983, 0.986367, 0.985725, 0.985282, 0.984701, 0.988632, 0.987899, 0.983673, 0.983165, 0.982859, 0.98215, 0.98178, 0.981331, 0.981425, 0.980898, 0.980591, 0.980235, 0.979804, 0.979621, 0.979373, 0.978852, 0.978649, 0.978509, 0.978094, 0.977475, 0.977457, 0.977072, 0.97667, 0.976576, 0.976302, 0.975992, 0.975863, 0.975559, 0.975358, 0.975148, 0.974853, 0.974675, 0.974443, 0.973657, 0.97396, 0.973637, 0.973622, 0.973404, 0.973245, 0.973129, 0.972997, 0.972908, 0.972436, 0.972596, 0.972722, 0.972278, 0.972546, 0.972409, 0.972076, 0.97235, 0.972562, 0.972079, 0.972011, 0.971914, 0.971685, 0.971691, 0.97147, 0.971879, 0.971531, 0.971847, 0.971427, 0.971684, 0.971695, 0.971317, 0.971881, 0.971452, 0.971321, 0.971591, 0.971674, 0.97175, 0.97143, 0.971403, 0.971702, 0.971555, 0.971298, 0.971562, 0.971932, 0.971564, 0.971509, 0.971176, 0.971959, 0.971351, 0.972089, 0.972059, 0.971801, 0.971317, 0.971436, 0.972077, 0.971312, 0.972385, 0.971788, 0.972224, 0.971502, 0.972547, 0.972247, 0.97216, 0.972086, 0.972024, 0.972279, 0.972516, 0.972563, 0.971922, 0.972996, 0.973091, 0.973216, 0.973184, 0.973319, 0.973349, 0.973463, 0.9732, 0.973678, 0.97351, 0.973286, 0.973236, 0.973404, 0.97364, 0.97378, 0.973903, 0.974208, 0.97401, 0.974113, 0.974227, 0.974207, 0.974535, 0.973861, 0.973826, 0.974155, 0.974024, 0.974636, 0.97412, 0.973582, 0.973811, 0.97484, 0.973982, 0.974437, 0.974799, 0.975334, 0.975092, 0.974976, 0.975482, 0.975644, 0.975417, 0.975038, 0.974714, 0.975648, 0.976079, 0.975839, 0.975889, 0.975727, 0.976479, 0.977712, 0.976687, 0.97628, 0.976229, 0.976597, 0.976388, 0.977456, 0.977568, 0.976935, 0.976089, 0.977106, 0.977303, 0.977825, 0.978323, 0.97904, 0.977475, 0.978753, 0.980344, 0.977833, 0.97632, 0.977834, 0.979084, 0.978831, 0.97914, 0.972105, 0.973543, 0.981108, 0.979186, 0.978982, 0.971418, 0.980235, 0.981514, 0.981365, 0.981617, 0.9818, 0.981922, 0.981886, 0.97264, 0.982312, 0.982177, 0.982503, 0.982722, 0.982834, 0.982523, 0.982704, 0.982811, 0.983245, 0.982942, 0.98351, 0.983484, 0.971298, 0.983568, 0.983716, 0.98411, 0.984149, 0.9847, 0.984687, 0.98468, 0.984619, 0.984761, 0.984931, 0.985046, 0.985404, 0.985108, 0.98511, 0.985451, 0.985359, 0.985456, 0.985958, 0.985512, 0.985479, 0.985787, 0.985277, 0.986087, 0.985669, 0.986298, 0.986174, 0.98583, 0.986653, 0.986734, 0.974676, 0.986459, 0.986969, 0.986695, 0.986846, 0.987123, 0.986833, 0.987303, 0.987242, 0.987919, 0.987572, 0.987475, 0.987902, 0.987337, 0.987675, 0.987607, 0.988024, 0.988039, 0.98818, 0.988389, 0.987908, 0.988166, 0.988918, 0.988605, 0.988651, 0.98897, 0.988934, 0.988653, 0.988551, 0.98927, 0.988854, 0.989557, 0.989147, 0.989503, 0.989541, 0.989408, 0.989176, 0.990021, 0.98962, 0.989963, 0.990276, 0.99004, 0.99038, 0.990496, 0.989623};

    double pointwise_1sig_4p5[530] = {4.66175, 4.66175, 4.66175, 4.66175, 4.66175, 4.66175, 4.66175, 4.66175, 4.66175, 4.66175, 4.66175, 4.5568, 4.06378, 3.9535, 3.91597, 3.87861, 3.84176, 3.8081, 3.76521, 3.71245, 3.65249, 3.58831, 3.52238, 3.45821, 3.39448, 3.33138, 3.26943, 3.2087, 3.14956, 3.09218, 3.03631, 2.98215, 2.92956, 2.87874, 2.82938, 2.78161, 2.73515, 2.6902, 2.64655, 2.60435, 2.56335, 2.52353, 2.4849, 2.44737, 2.41103, 2.37575, 2.34126, 2.30798, 2.27556, 2.24401, 2.21338, 2.18366, 2.15462, 2.12648, 2.09893, 2.07227, 2.04633, 2.02085, 1.99628, 1.97224, 1.94889, 1.92624, 1.90398, 1.88229, 1.86126, 1.84058, 1.82036, 1.80071, 1.78152, 1.76251, 1.74423, 1.72627, 1.70873, 1.69163, 1.67493, 1.65869, 1.64289, 1.62758, 1.61263, 1.59803, 1.58405, 1.57024, 1.55678, 1.54383, 1.53107, 1.51872, 1.50656, 1.49476, 1.48316, 1.47192, 1.46085, 1.4501, 1.44001, 1.43021, 1.42065, 1.4112, 1.40201, 1.39286, 1.38411, 1.37539, 1.36693, 1.35871, 1.35055, 1.34262, 1.33482, 1.32715, 1.31971, 1.31244, 1.30527, 1.29827, 1.29146, 1.28481, 1.27825, 1.27164, 1.26533, 1.25909, 1.25303, 1.24684, 1.24094, 1.23509, 1.22928, 1.22335, 1.21767, 1.21196, 1.20604, 1.20032, 1.19435, 1.18864, 1.18279, 1.17656, 1.17043, 1.16388, 1.15754, 1.15062, 1.14415, 1.13712, 1.13048, 1.12512, 1.12008, 1.11517, 1.11013, 1.10545, 1.10065, 1.09619, 1.09154, 1.08725, 1.08282, 1.07882, 1.07501, 1.07092, 1.06727, 1.06347, 1.06001, 1.05661, 1.05323, 1.05002, 1.04717, 1.04484, 1.04226, 1.03995, 1.03776, 1.03502, 1.03284, 1.03069, 1.0285, 1.02624, 1.02416, 1.02206, 1.01943, 1.01751, 1.01541, 1.01342, 1.01143, 1.00962, 1.00769, 1.00572, 1.0034, 1.00162, 0.999881, 0.998098, 0.996305, 0.994563, 0.993023, 0.991311, 0.98966, 0.987995, 0.985865, 0.98428, 0.982717, 0.981163, 0.979672, 0.978213, 0.976846, 0.975407, 0.974001, 0.972517, 0.971284, 0.969961, 0.968643, 0.966731, 0.965493, 0.964164, 0.963035, 0.961712, 0.96059, 0.959318, 0.958261, 0.957015, 0.955864, 0.95482, 0.953722, 0.952643, 0.951562, 0.950497, 0.949463, 0.948419, 0.947384, 0.946337, 0.945082, 0.9441, 0.943089, 0.942257, 0.941331, 0.940383, 0.939589, 0.938706, 0.937825, 0.936966, 0.936226, 0.935409, 0.934573, 0.933737, 0.933098, 0.932182, 0.931575, 0.930805, 0.930183, 0.92943, 0.928778, 0.928045, 0.927422, 0.926653, 0.926059, 0.925367, 0.924887, 0.92423, 0.923487, 0.922916, 0.922358, 0.921766, 0.921297, 0.920836, 0.920211, 0.91977, 0.919138, 0.918632, 0.918293, 0.918045, 0.917477, 0.917097, 0.916539, 0.916124, 0.915759, 0.915294, 0.914808, 0.914508, 0.913986, 0.913726, 0.913267, 0.91305, 0.912522, 0.912247, 0.911953, 0.911699, 0.911167, 0.910998, 0.910678, 0.910243, 0.910002, 0.909779, 0.909442, 0.909185, 0.908894, 0.908519, 0.908483, 0.908212, 0.907871, 0.907711, 0.907138, 0.907176, 0.906939, 0.906687, 0.906392, 0.906263, 0.906154, 0.905953, 0.905691, 0.905446, 0.905349, 0.905263, 0.904962, 0.904921, 0.904735, 0.904386, 0.904479, 0.904395, 0.904182, 0.904101, 0.903937, 0.90373, 0.903633, 0.903491, 0.903582, 0.903491, 0.903435, 0.903174, 0.903159, 0.903275, 0.903014, 0.902837, 0.902749, 0.902722, 0.902805, 0.902822, 0.902626, 0.902433, 0.902453, 0.902596, 0.902333, 0.902283, 0.902384, 0.902385, 0.902379, 0.902081, 0.901895, 0.90215, 0.901922, 0.902109, 0.902284, 0.902139, 0.902064, 0.902154, 0.902185, 0.901914, 0.902385, 0.902321, 0.902224, 0.902024, 0.902615, 0.902475, 0.902547, 0.902436, 0.902024, 0.902279, 0.902516, 0.902563, 0.901922, 0.902996, 0.903091, 0.903216, 0.903184, 0.903319, 0.903349, 0.903463, 0.903414, 0.903678, 0.90358, 0.903286, 0.903471, 0.903404, 0.90364, 0.903881, 0.903903, 0.904208, 0.904011, 0.904113, 0.904227, 0.904207, 0.904535, 0.903861, 0.903826, 0.904155, 0.904024, 0.904636, 0.90412, 0.903582, 0.903811, 0.90484, 0.903982, 0.904437, 0.904799, 0.905334, 0.905092, 0.904976, 0.905482, 0.905644, 0.905417, 0.905038, 0.904714, 0.905648, 0.906079, 0.905839, 0.905889, 0.905727, 0.906479, 0.907712, 0.906687, 0.90628, 0.906229, 0.906597, 0.906388, 0.907456, 0.907568, 0.906935, 0.906089, 0.907106, 0.907303, 0.907825, 0.908323, 0.90904, 0.907475, 0.908753, 0.910344, 0.907833, 0.90632, 0.907834, 0.909084, 0.908831, 0.90914, 0.902105, 0.903543, 0.911108, 0.909186, 0.908982, 0.901418, 0.910235, 0.911514, 0.911365, 0.911617, 0.9118, 0.911922, 0.911886, 0.90264, 0.912312, 0.912177, 0.912503, 0.912722, 0.912834, 0.912523, 0.912704, 0.912811, 0.913245, 0.912942, 0.91351, 0.913484, 0.901298, 0.913568, 0.913716, 0.91411, 0.914149, 0.9147, 0.914687, 0.91468, 0.914619, 0.914761, 0.914931, 0.915046, 0.915404, 0.915108, 0.91511, 0.915451, 0.915359, 0.915456, 0.915958, 0.915512, 0.915479, 0.915787, 0.915277, 0.916087, 0.915669, 0.916298, 0.916174, 0.91583, 0.916653, 0.916734, 0.904676, 0.916658, 0.916969, 0.916695, 0.916846, 0.917123, 0.916833, 0.917303, 0.917242, 0.917919, 0.917572, 0.917475, 0.917902, 0.917337, 0.917675, 0.917607, 0.918024, 0.918039, 0.91818, 0.918389, 0.917908, 0.918166, 0.918918, 0.918605, 0.918651, 0.91897, 0.918934, 0.918653, 0.918551, 0.91927, 0.918854, 0.919557, 0.919147, 0.919503, 0.919541, 0.919408, 0.919176, 0.920021, 0.91962, 0.919963, 0.920276, 0.92004, 0.92038, 0.920496, 0.919623};


    const int numPoints_4p5 = 530;
    TGraph* mean_graph = new TGraph(numPoints_4p5 ,pointwise_momentum_4p5,pointwise_mean_4p5);
    TGraph* sig1_graph = new TGraph(numPoints_4p5 ,pointwise_momentum_4p5,pointwise_1sig_4p5);

    Double_t calculateNsigma(double lndedx, double momentum, int nHitsDedx)
    {
      Double_t nSigmaProton = 999;
      Double_t shiftValue   = mean_graph->Eval(momentum);
      Double_t stretchValue = sig1_graph->Eval(momentum);

      // Now shift and stretch ln(de/dx) to get nSigmaProton 
      Double_t shiftedLnDedx = lndedx-shiftValue;
      nSigmaProton = shiftedLnDedx/(shiftValue-stretchValue);

      // Reject tracks with the following traits 
      //if(nHitsDedx<20) nSigmaProton = 999;
      //if(momentum<0.12 || momentum > 10.0) nSigmaProton = 999;
      return nSigmaProton;
    }
  };// End NewNSigmaProton4p5GeV_SL23d





  struct NewNSigmaProton3p2GeV
  {
    const static int numRapidityWindows = 17;
    const static int numRapidityWindowsToUsePointwiseCorrection = 3;
    TF1* bichselFunction_mean[numRapidityWindows];
    TF1* bichselFunction_1sig[numRapidityWindows];
  
    TGraph* mean_graph[3];
    TGraph* sig1_graph[3];  

    // Pointwise-correction parameters to be used at low momenta and low rapidities 
    double lowestMomWhichHasAFit[3];
    double lowestMomUsedForBichselFit[3];
    
    double pointwise_momentum_0[20] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195};
    double pointwise_mean_0[20] = {4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.03425, 3.99311, 3.94308, 3.88901, 3.83291, 3.77598};
    double pointwise_1sig_0[20] = {4.01109, 4.01109, 4.01109, 4.01109, 4.01109, 4.01109, 4.01109, 4.01109, 4.01109, 4.01109, 4.01109, 4.01109, 4.01109, 4.01109, 3.97051, 3.92808, 3.88058, 3.83105, 3.77989, 3.72508};

    double pointwise_momentum_1[24] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195, 0.205, 0.215, 0.225, 0.235};
    double pointwise_mean_1[24] = {3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.84933, 3.7977, 3.74982, 3.70112, 3.65017, 3.59674, 3.54167};
    double pointwise_1sig_1[24] = {3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.77977, 3.72948, 3.68502, 3.63939, 3.59034, 3.53756, 3.48334};
    
    double pointwise_momentum_2[32] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195, 0.205, 0.215, 0.225, 0.235, 0.245, 0.255, 0.265, 0.275, 0.285, 0.295, 0.305, 0.315};
    double pointwise_mean_2[32] = {3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.40402, 3.35661, 3.30871, 3.2577, 3.20611, 3.15557, 3.107};
    double pointwise_1sig_2[32] = {3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.33402, 3.28661, 3.23871, 3.1877, 3.13764, 3.08949, 3.0435};
    
    // Parameters from Bichsel curve fits (H. Bichsel / Nuclear Instruments and Methods in Physics Research A 562 (2006) page 195) 
    double meanBichselParameters[numRapidityWindows][6] = {
      {-0.227966,-1.947452,1.698877,1.116508,2.491739,0.938000},
      {-0.906363,-2.348223,1.743461,1.108302,2.359716,0.938000},
      {-0.614651,-2.241335,1.624326,1.144715,2.380232,0.938000},
      {-1.186437,-2.620453,1.622527,1.118374,2.333279,0.938000},
      {-5.089407,-4.698291,1.938589,0.831378,2.262067,0.938000},
      {-5.073031,-4.778549,1.877451,0.762094,2.338385,0.938000},
      {-5.046706,-4.836419,1.837368,0.512003,2.557916,0.938000},
      {-4.965796,-4.879391,1.818065,0.347630,3.087001,0.938000},
      {-13.505080,-8.529639,2.498983,0.507081,2.637780,0.938000},
      {-5.035899,-5.161085,1.645866,-0.991880,4.372225,0.938000},
      {-7.988699,-6.848821,1.785826,0.857071,2.614882,0.938000},
      {-4.097592,-6.227094,1.083402,4.447512,1.566225,0.938000},
      {-3.368052,-6.739509,0.907986,5.251134,1.669462,0.938000},
      {-3.701538,-6.701420,0.979808,1.051356,3.165626,0.938000},
      {-4.439844,-6.816681,1.067793,1.580762,2.548197,0.938000},
      {-4.895664,-5.324965,1.554491,-0.287449,3.132595,0.938000},
      {-5.978530,-5.690012,1.740206,0.189245,3.177314,0.938000}
    };
    double sig1BichselParameters[numRapidityWindows][6] = {
      {4.942490,-1.732692,0.103650,1.584292,3.443852,0.458243},
      {-2.048825,-4.388962,1.075924,0.960740,2.413125,0.688201},
      {-5.140414,-4.654629,1.951665,0.819828,2.264229,0.887815},
      {-5.141626,-4.653979,1.947455,0.774334,2.331612,0.901746},
      {-3.995552,-4.761255,1.473468,0.714432,2.502485,0.813790},
      {-5.142394,-4.655081,1.943287,0.508679,2.604774,0.931181},
      {-3.718692,-3.581791,2.149504,0.305906,2.891777,1.063736},
      {-71.403803,-18.809103,19.233168,0.185852,1.072852,5.512266},
      {-15.970397,-9.042774,2.903327,0.563681,2.554410,0.987476},
      {1.518479,-0.603197,2.093214,0.349728,4.765742,1.611703},
      {-29.532566,-19.070781,1.988991,0.513077,2.446239,0.666395},
      {-5.144622,-4.653428,1.939297,-0.821817,6.644838,1.134653},
      {-5.121391,-4.665033,1.949753,-0.272327,6.340915,1.243531},
      {-5.094469,-4.682484,1.962738,1.485384,3.028247,1.248443},
      {-9.973230,-7.819392,1.867982,1.023731,2.730247,1.173559},
      {-5.136450,-4.659384,1.948466,0.589825,2.644892,1.066994},
      {-5.074660,-4.691923,1.970780,1.243181,3.600409,1.463297}
    };
      

    TF1* getLnBichselFunction(std::string a_functionName,double a_mass, bool IsNegativeMomentum=false){
      //H. Bichsel / Nuclear Instruments and Methods in Physics Research A 562 (2006) page 195
      TF1* funct;
      if(IsNegativeMomentum) funct = new TF1(a_functionName.c_str(), "log(pow(sqrt([5]*[5] + x*x)/(-1.0*x),[3]) * ([0] - [1]*log([2] + pow([5]/(-1.0*x),[4]))) - [1])",-10.0,-0.5);
      else funct = new TF1(a_functionName.c_str(), "log(pow(sqrt([5]*[5] + x*x)/x,[3]) * ([0] - [1]*log([2] + pow([5]/x,[4]))) - [1])",0.0,10.0);
      //   ln(   (beta)^-D * (A - B ln(C + betagamma^-E)) - B   )
      /*funct->SetParNames("A","B","C","D","E","m");
	funct->SetParameter(0,-5.18614e+00);// A
	funct->SetParameter(1,-4.51905e+00);// B
	funct->SetParameter(2, 2.25999e+00); //C
	funct->SetParameter(3, 7.86756e-01); //D
	funct->SetParameter(4, 2.32399e+00);// E
	funct->SetParameter(5,a_mass); // m*/
      funct->SetParNames("A","B","C","D","E","m");
      funct->SetParameter(0,-5.14284e+00);// A
      funct->SetParameter(1,-4.65154e+00);// B
      funct->SetParameter(2, 1.94239e+00); //C
      funct->SetParameter(3,-9.90463e-02); //D
      funct->SetParameter(4, 3.19269e+00);// E
      funct->SetParameter(5,a_mass); // m


      funct->SetNpx(1000);
      return funct;
    }

    void initialize()
    {
      lowestMomWhichHasAFit[0]=0.130000;
      lowestMomUsedForBichselFit[0]=0.200000;

      mean_graph[0] = new TGraph(20,pointwise_momentum_0,pointwise_mean_0);
      sig1_graph[0] = new TGraph(20,pointwise_momentum_0,pointwise_1sig_0);
    
      lowestMomWhichHasAFit[1]=0.170000;
      lowestMomUsedForBichselFit[1]=0.240000;

      mean_graph[1] = new TGraph(24,pointwise_momentum_1,pointwise_mean_1);
      sig1_graph[1] = new TGraph(24,pointwise_momentum_1,pointwise_1sig_1);

      lowestMomWhichHasAFit[2]=0.250000;
      lowestMomUsedForBichselFit[2]=0.320000;

      mean_graph[2] = new TGraph(32,pointwise_momentum_2,pointwise_mean_2);
      sig1_graph[2] = new TGraph(32,pointwise_momentum_2,pointwise_1sig_2);

      // Loop over rapidity steps 
      for(int i=0; i<numRapidityWindows; i++)
	{
	  bichselFunction_mean[i] = getLnBichselFunction(Form("bichselFunction_mean_%d",i),0.938);
	  bichselFunction_1sig[i] = getLnBichselFunction(Form("bichselFunction_1sig_%d",i),0.938);
	  for(int j=0; j<6; j++){
	    bichselFunction_mean[i]->SetParameter(j,meanBichselParameters[i][j]);
	    bichselFunction_1sig[i]->SetParameter(j,sig1BichselParameters[i][j]);
	  }
	}
    } // End initialize()


    double getNewNSigmaProton(double rapidity, double momentum, double dedx)
    {
      // Later when the rapidity, momentum, and dedx of a track has been grabbed, calculate the nσ_p value  
      double nSigmaProton = 999; 
      double lndedx = log(dedx); 
      rapidity = fabs(rapidity); // take absolute value of rapidity
      //int rapIndex = TMath::FloorNint(10.0*rapidity);
      int rapIndex_lo = TMath::FloorNint(10.0*(-0.05+TMath::Abs(rapidity)));
      int rapIndex_hi = rapIndex_lo + 1;
      if(rapIndex_lo==-1) rapIndex_lo=0;
      if(rapIndex_hi==-1) rapIndex_hi=0;
      if(rapIndex_hi>=17) rapIndex_hi=16;
      if(rapIndex_lo>=17) rapIndex_lo=16;
      //double rapPointwiseCutoff = 10.0*numRapidityWindowsToUsePointwiseCorrection;
      double shiftValue_lo = 0.0;
      double shiftValue_hi = 0.0;
      double shiftValue = 0.0;
      double stretchValue_lo = 1.0;
      double stretchValue_hi = 1.0;
      double stretchValue = 1.0;
      if(rapIndex_lo < numRapidityWindowsToUsePointwiseCorrection && momentum < lowestMomUsedForBichselFit[rapIndex_lo])
	{
	  shiftValue_lo = mean_graph[rapIndex_lo]->Eval(momentum); 
	  stretchValue_lo = sig1_graph[rapIndex_lo]->Eval(momentum); 
	  if(momentum < lowestMomWhichHasAFit[rapIndex_lo])
	    {
	      shiftValue_lo = mean_graph[rapIndex_lo]->GetY()[0]; 
	      stretchValue_lo = sig1_graph[rapIndex_lo]->GetY()[0];
	    } 
	}
      else 
	{ 
	  shiftValue_lo = bichselFunction_mean[rapIndex_lo]->Eval(momentum); 
	  stretchValue_lo = bichselFunction_1sig[rapIndex_lo]->Eval(momentum); 
	}
      if(rapIndex_hi < numRapidityWindowsToUsePointwiseCorrection && momentum < lowestMomUsedForBichselFit[rapIndex_hi])
	{
	  shiftValue_hi = mean_graph[rapIndex_hi]->Eval(momentum); 
	  stretchValue_hi = sig1_graph[rapIndex_hi]->Eval(momentum);
	  if(momentum < lowestMomWhichHasAFit[rapIndex_hi])
	    {
	      shiftValue_hi = mean_graph[rapIndex_hi]->GetY()[0]; 
	      stretchValue_hi = sig1_graph[rapIndex_hi]->GetY()[0];
	    } 
	}
      else 
	{ shiftValue_hi = bichselFunction_mean[rapIndex_hi]->Eval(momentum); 
	  stretchValue_hi = bichselFunction_1sig[rapIndex_hi]->Eval(momentum); 
	}
     
      double rapidity_lo = 0.05+0.1*(rapIndex_lo);
      double rapidity_hi = 0.05+0.1*(rapIndex_hi);
      double relativeWeight;
      if(rapidity_lo == rapidity_hi) relativeWeight = 0.5;

      if(rapidity < rapidity_lo) relativeWeight = 0.0;
      else if(rapidity > rapidity_hi) relativeWeight = 1.0;
      else relativeWeight = (rapidity-rapidity_lo)/(rapidity_hi-rapidity_lo);

      shiftValue = relativeWeight*shiftValue_hi + (1.0-relativeWeight)*shiftValue_lo;
      stretchValue = relativeWeight*stretchValue_hi + (1.0-relativeWeight)*stretchValue_lo;
     
      // Now shift and stretch ln(de/dx) to get nSigmaProton 
      double shiftedLnDedx = lndedx-shiftValue;
      nSigmaProton = shiftedLnDedx/(shiftValue-stretchValue);
     
      // Reject tracks with the following traits 
      //if(nHitsDedx<20) nSigmaProton = 999; 
      if(momentum<0.0 || momentum > 10.0) nSigmaProton = 999; 

      return nSigmaProton;
    } // End getNewNSigmaProton()
  }; // End struct NewNSigmaProton3p2GeV





  
  struct NewNSigmaProton3p5GeV
  {
    const static int numRapidityWindows = 17;
    const static int numRapidityWindowsToUsePointwiseCorrection = 3;
    TF1* bichselFunction_mean[numRapidityWindows];
    TF1* bichselFunction_1sig[numRapidityWindows];
  
    TGraph* mean_graph[3];
    TGraph* sig1_graph[3];
    // Pointwise-correction parameters to be used at low momenta and low rapidities 
    double lowestMomWhichHasAFit[3];
    double lowestMomUsedForBichselFit[3];
    
    double pointwise_momentum_0[20] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195};
    double pointwise_mean_0[20] = {4.07434, 4.07434, 4.07434, 4.07434, 4.07434, 4.07434, 4.07434, 4.07434, 4.07434, 4.07434, 4.07434, 4.07434, 4.07434, 4.07434, 4.04196, 3.99361, 3.94046, 3.88689, 3.83252, 3.77603};
    double pointwise_1sig_0[20] = {4.01008, 4.01008, 4.01008, 4.01008, 4.01008, 4.01008, 4.01008, 4.01008, 4.01008, 4.01008, 4.01008, 4.01008, 4.01008, 4.01008, 3.97848, 3.92785, 3.8764, 3.8277, 3.77849, 3.72457};
    
    double pointwise_momentum_1[24] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195, 0.205, 0.215, 0.225, 0.235};
    double pointwise_mean_1[24] = {3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.85984, 3.80459, 3.75502, 3.70479, 3.65265, 3.59745, 3.54021};
    double pointwise_1sig_1[24] = {3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.78984, 3.73459, 3.68829, 3.64167, 3.59196, 3.53768, 3.48136};
    
    double pointwise_momentum_2[32] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195, 0.205, 0.215, 0.225, 0.235, 0.245, 0.255, 0.265, 0.275, 0.285, 0.295, 0.305, 0.315};
    double pointwise_mean_2[32] = {3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.41102, 3.36142, 3.31105, 3.25866, 3.20617, 3.15464, 3.10548};
    double pointwise_1sig_2[32] = {3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.34102, 3.29142, 3.24105, 3.18881, 3.13825, 3.08904, 3.04236};
    
    // Parameters from Bichsel curve fits (H. Bichsel / Nuclear Instruments and Methods in Physics Research A 562 (2006) page 195) 
    double meanBichselParameters[numRapidityWindows][6] = {
      {-5.092943,-4.640572,1.908917,0.978064,1.837915,0.938000},
      {-0.659163,-2.209373,1.678841,1.154059,2.290688,0.938000},
      {-0.313533,-2.035206,1.584761,1.230861,2.285030,0.938000},
      {-0.893688,-2.405065,1.603568,1.236016,2.212285,0.938000},
      {-5.067733,-4.718756,1.890024,0.972786,2.090088,0.938000},
      {-5.060938,-4.835593,1.801288,1.015586,2.057320,0.938000},
      {-5.045866,-4.880064,1.782700,0.842702,2.226889,0.938000},
      {-5.033661,-4.890768,1.799017,0.157471,2.869778,0.938000},
      {-0.956699,-3.468721,1.071352,-0.170151,3.351006,0.938000},
      {-4.982008,-5.098390,1.678426,0.386340,2.865584,0.938000},
      {-4.930145,-5.464084,1.505620,1.832087,2.178729,0.938000},
      {-4.667087,-5.612072,1.401343,1.278266,2.723832,0.938000},
      {-6.853560,-8.485027,1.141610,-0.227246,5.167554,0.938000},
      {-2.368033,-5.187790,0.995863,3.689650,2.167992,0.938000},
      {-4.316409,-6.463155,1.103758,0.478797,3.220366,0.938000},
      {-13.437760,-10.140298,1.823939,0.662773,2.510908,0.938000},
      {-5.051530,-4.695740,1.979253,0.674798,2.785134,0.938000}
    };
    double sig1BichselParameters[numRapidityWindows][6] = {
      {-5.249671,-4.645090,1.904914,0.960111,1.854916,0.921248},
      {-5.194184,-4.641954,1.937924,0.930961,2.007013,0.901315},
      {-5.181766,-4.637340,1.930889,0.939909,2.021784,0.913086},
      {0.579304,-3.268654,0.672862,1.317425,2.430856,0.642275},
      {-5.165629,-4.645111,1.933057,0.893594,2.180889,0.928042},
      {-5.174665,-4.644717,1.924935,0.908074,2.154252,0.951100},
      {-5.152355,-4.651824,1.937027,0.345109,2.695883,0.945865},
      {-4.467375,-3.971009,2.153613,-1.133300,4.556280,1.072056},
      {-3.516175,-3.189363,2.495112,-1.299702,4.860644,1.292207},
      {-1.752874,-2.696696,1.860238,-0.513426,3.830402,1.253298},
      {-5.270542,-4.714190,1.958827,0.991582,2.427328,1.005969},
      {-5.123778,-4.664506,1.950183,1.220159,2.506098,1.031556},
      {-5.122731,-4.664056,1.949713,-0.056186,4.798412,1.158343},
      {-5.100615,-4.678819,1.960143,1.521345,2.944816,1.227547},
      {-5.110781,-4.672200,1.955830,1.486902,2.845572,1.288074},
      {-5.143146,-4.653472,1.944525,0.412436,2.622885,0.992467},
      {-5.080330,-4.688606,1.968640,1.380224,3.451587,1.434801}
    };

    TF1* getLnBichselFunction(std::string a_functionName,double a_mass, bool IsNegativeMomentum=false){
      //H. Bichsel / Nuclear Instruments and Methods in Physics Research A 562 (2006) page 195
      TF1* funct;
      if(IsNegativeMomentum) funct = new TF1(a_functionName.c_str(), "log(pow(sqrt([5]*[5] + x*x)/(-1.0*x),[3]) * ([0] - [1]*log([2] + pow([5]/(-1.0*x),[4]))) - [1])",-10.0,-0.5);
      else funct = new TF1(a_functionName.c_str(), "log(pow(sqrt([5]*[5] + x*x)/x,[3]) * ([0] - [1]*log([2] + pow([5]/x,[4]))) - [1])",0.0,10.0);
      //   ln(   (beta)^-D * (A - B ln(C + betagamma^-E)) - B   )
      /*funct->SetParNames("A","B","C","D","E","m");
	funct->SetParameter(0,-5.18614e+00);// A
	funct->SetParameter(1,-4.51905e+00);// B
	funct->SetParameter(2, 2.25999e+00); //C
	funct->SetParameter(3, 7.86756e-01); //D
	funct->SetParameter(4, 2.32399e+00);// E
	funct->SetParameter(5,a_mass); // m*/
      funct->SetParNames("A","B","C","D","E","m");
      funct->SetParameter(0,-5.14284e+00);// A
      funct->SetParameter(1,-4.65154e+00);// B
      funct->SetParameter(2, 1.94239e+00); //C
      funct->SetParameter(3,-9.90463e-02); //D
      funct->SetParameter(4, 3.19269e+00);// E
      funct->SetParameter(5,a_mass); // m


      funct->SetNpx(1000);
      return funct;
    }

    void initialize()
    {
      lowestMomWhichHasAFit[0]=0.130000;
      lowestMomUsedForBichselFit[0]=0.200000;

      mean_graph[0] = new TGraph(20,pointwise_momentum_0,pointwise_mean_0);
      sig1_graph[0] = new TGraph(20,pointwise_momentum_0,pointwise_1sig_0);

      lowestMomWhichHasAFit[1]=0.170000;
      lowestMomUsedForBichselFit[1]=0.240000;

      mean_graph[1] = new TGraph(24,pointwise_momentum_1,pointwise_mean_1);
      sig1_graph[1] = new TGraph(24,pointwise_momentum_1,pointwise_1sig_1);

      lowestMomWhichHasAFit[2]=0.250000;
      lowestMomUsedForBichselFit[2]=0.320000;

      mean_graph[2] = new TGraph(32,pointwise_momentum_2,pointwise_mean_2);
      sig1_graph[2] = new TGraph(32,pointwise_momentum_2,pointwise_1sig_2);


      // Loop over rapidity steps 
      for(int i=0; i<numRapidityWindows; i++)
	{
	  bichselFunction_mean[i] = getLnBichselFunction(Form("bichselFunction_mean_%d",i),0.938);
	  bichselFunction_1sig[i] = getLnBichselFunction(Form("bichselFunction_1sig_%d",i),0.938);
	  for(int j=0; j<6; j++){
	    bichselFunction_mean[i]->SetParameter(j,meanBichselParameters[i][j]);
	    bichselFunction_1sig[i]->SetParameter(j,sig1BichselParameters[i][j]);
	  }
	}
    } // End initialize()


    double getNewNSigmaProton(double rapidity, double momentum, double dedx)
    {
      // Later when the rapidity, momentum, and dedx of a track has been grabbed, calculate the nσ_p value  
      double nSigmaProton = 999; 
      double lndedx = log(dedx); 
      rapidity = fabs(rapidity); // take absolute value of rapidity
      //int rapIndex = TMath::FloorNint(10.0*rapidity);
      int rapIndex_lo = TMath::FloorNint(10.0*(-0.05+TMath::Abs(rapidity)));
      int rapIndex_hi = rapIndex_lo + 1;
      if(rapIndex_lo==-1) rapIndex_lo=0;
      if(rapIndex_hi==-1) rapIndex_hi=0;
      if(rapIndex_hi>=17) rapIndex_hi=16;
      if(rapIndex_lo>=17) rapIndex_lo=16;
      //double rapPointwiseCutoff = 10.0*numRapidityWindowsToUsePointwiseCorrection;
      double shiftValue_lo = 0.0;
      double shiftValue_hi = 0.0;
      double shiftValue = 0.0;
      double stretchValue_lo = 1.0;
      double stretchValue_hi = 1.0;
      double stretchValue = 1.0;
      if(rapIndex_lo < numRapidityWindowsToUsePointwiseCorrection && momentum < lowestMomUsedForBichselFit[rapIndex_lo])
	{
	  shiftValue_lo = mean_graph[rapIndex_lo]->Eval(momentum); 
	  stretchValue_lo = sig1_graph[rapIndex_lo]->Eval(momentum); 
	  if(momentum < lowestMomWhichHasAFit[rapIndex_lo])
	    {
	      shiftValue_lo = mean_graph[rapIndex_lo]->GetY()[0]; 
	      stretchValue_lo = sig1_graph[rapIndex_lo]->GetY()[0];
	    } 
	}
      else 
	{ 
	  shiftValue_lo = bichselFunction_mean[rapIndex_lo]->Eval(momentum); 
	  stretchValue_lo = bichselFunction_1sig[rapIndex_lo]->Eval(momentum); 
	}
      if(rapIndex_hi < numRapidityWindowsToUsePointwiseCorrection && momentum < lowestMomUsedForBichselFit[rapIndex_hi])
	{
	  shiftValue_hi = mean_graph[rapIndex_hi]->Eval(momentum); 
	  stretchValue_hi = sig1_graph[rapIndex_hi]->Eval(momentum);
	  if(momentum < lowestMomWhichHasAFit[rapIndex_hi])
	    {
	      shiftValue_hi = mean_graph[rapIndex_hi]->GetY()[0]; 
	      stretchValue_hi = sig1_graph[rapIndex_hi]->GetY()[0];
	    } 
	}
      else 
	{ shiftValue_hi = bichselFunction_mean[rapIndex_hi]->Eval(momentum); 
	  stretchValue_hi = bichselFunction_1sig[rapIndex_hi]->Eval(momentum); 
	}
     
      double rapidity_lo = 0.05+0.1*(rapIndex_lo);
      double rapidity_hi = 0.05+0.1*(rapIndex_hi);
      double relativeWeight;
      if(rapidity_lo == rapidity_hi) relativeWeight = 0.5;

      if(rapidity < rapidity_lo) relativeWeight = 0.0;
      else if(rapidity > rapidity_hi) relativeWeight = 1.0;
      else relativeWeight = (rapidity-rapidity_lo)/(rapidity_hi-rapidity_lo);

      shiftValue = relativeWeight*shiftValue_hi + (1.0-relativeWeight)*shiftValue_lo;
      stretchValue = relativeWeight*stretchValue_hi + (1.0-relativeWeight)*stretchValue_lo;
     
      // Now shift and stretch ln(de/dx) to get nSigmaProton 
      double shiftedLnDedx = lndedx-shiftValue;
      nSigmaProton = shiftedLnDedx/(shiftValue-stretchValue);
     
      // Reject tracks with the following traits 
      //if(nHitsDedx<20) nSigmaProton = 999; 
      if(momentum<0.0 || momentum > 10.0) nSigmaProton = 999; 

      return nSigmaProton;
    } // End getNewNSigmaProton()
  }; // End struct NewNSigmaProton3p5GeV


  struct NewNSigmaProton3p9GeV
  {
    const static int numRapidityWindows = 17;
    const static int numRapidityWindowsToUsePointwiseCorrection = 3;
    TF1* bichselFunction_mean[numRapidityWindows];
    TF1* bichselFunction_1sig[numRapidityWindows];
  
    TGraph* mean_graph[3];
    TGraph* sig1_graph[3];
    // Pointwise-correction parameters to be used at low momenta and low rapidities 
    double lowestMomWhichHasAFit[3];
    double lowestMomUsedForBichselFit[3];

    double pointwise_momentum_0[20] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195};
    double pointwise_mean_0[20] = {4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.07005, 4.03022, 3.98377, 3.93277, 3.88062, 3.82665, 3.77048};
    double pointwise_1sig_0[20] = {4.0092, 4.0092, 4.0092, 4.0092, 4.0092, 4.0092, 4.0092, 4.0092, 4.0092, 4.0092, 4.0092, 4.0092, 4.0092, 4.0092, 3.96611, 3.91731, 3.86877, 3.82141, 3.77262, 3.71876};
    
    double pointwise_momentum_1[24] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195, 0.205, 0.215, 0.225, 0.235};
    double pointwise_mean_1[24] = {3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.85093, 3.79815, 3.74984, 3.70108, 3.64975, 3.59552, 3.53934};
    double pointwise_1sig_1[24] = {3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.78093, 3.72845, 3.68411, 3.63898, 3.58984, 3.53651, 3.48123};
    
double pointwise_momentum_2[32] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195, 0.205, 0.215, 0.225, 0.235, 0.245, 0.255, 0.265, 0.275, 0.285, 0.295, 0.305, 0.315};
    double pointwise_mean_2[32] = {3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.41134, 3.3626, 3.31301, 3.26118, 3.20877, 3.1577, 3.10853};
    double pointwise_1sig_2[32] = {3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.34134, 3.2926, 3.24301, 3.19157, 3.14087, 3.09196, 3.04508};
    
    // Parameters from Bichsel curve fits (H. Bichsel / Nuclear Instruments and Methods in Physics Research A 562 (2006) page 195) 
    double meanBichselParameters[numRapidityWindows][6] = {
      {-5.177325,-4.565114,2.043163,0.926697,1.969583,0.938000},
      {-0.625984,-2.174822,1.711623,1.135181,2.374554,0.938000},
      {-0.467159,-2.130139,1.618613,1.174733,2.376978,0.938000},
      {-0.831247,-2.391516,1.597115,1.167913,2.353091,0.938000},
      {-5.093345,-4.689092,1.943219,0.832131,2.276891,0.938000},
      {-5.074470,-4.764597,1.891964,0.663462,2.460011,0.938000},
      {-5.038901,-4.829667,1.845495,0.133349,2.944921,0.938000},
      {-0.043268,-2.919098,0.963756,0.088509,3.300096,0.938000},
      {0.006582,-3.898368,0.733902,-2.145955,5.128702,0.938000},
      {-14.107090,-9.562289,2.176158,0.763134,2.597167,0.938000},
      {-12.014173,-9.346169,1.819754,1.009344,2.611237,0.938000},
      {-4.640004,-6.112600,1.269502,1.735888,2.751780,0.938000},
      {-5.806170,-7.747801,1.139622,1.930779,2.599439,0.938000},
      {-2.268550,-7.013657,0.778746,2.618637,2.811688,0.938000},
      {-2.280379,-7.061412,0.771718,3.320349,2.448393,0.938000},
      {-5.293035,-6.518209,1.284588,0.567845,3.170296,0.938000},
      {-4.786069,-5.157588,1.620347,1.073383,2.594362,0.938000}
    };
    double sig1BichselParameters[numRapidityWindows][6] = {
      {-2.199537,-4.551449,1.048161,0.971736,2.322050,0.670206},
      {-2.110362,-4.574579,1.037392,0.964539,2.397126,0.669572},
      {-5.157718,-4.646264,1.943121,0.872093,2.172467,0.893694},
      {0.499905,-3.367670,0.682757,1.219520,2.519937,0.645850},
      {-3.552719,-4.598840,1.400043,0.791708,2.475654,0.803871},
      {-5.145075,-4.653687,1.942072,0.529104,2.597866,0.930610},
      {-3.551871,-3.207324,2.514574,0.150560,3.145590,1.161430},
      {-3.790708,-3.559189,2.217708,-0.791251,4.182170,1.134552},
      {-3.573812,-3.217454,2.481291,-1.893540,5.855862,1.318876},
      {-15.401816,-12.081929,1.649789,0.844405,2.561858,0.779057},
      {-9.819051,-8.753436,1.546401,1.105451,2.607804,0.869509},
      {-7.657118,-7.020629,1.625261,1.379417,2.609855,0.974502},
      {-6.966518,-6.414624,1.685056,1.513236,2.722290,1.075895},
      {-7.293939,-6.579775,1.719777,1.834657,2.665309,1.231057},
      {-7.212817,-6.609524,1.686214,1.698213,2.833678,1.318012},
      {-6.809715,-5.983380,1.829462,1.612812,2.721876,1.364471},
      {-5.521483,-5.039877,1.904576,1.867710,2.590536,1.324373}
    };

    TF1* getLnBichselFunction(std::string a_functionName,double a_mass, bool IsNegativeMomentum=false){
      //H. Bichsel / Nuclear Instruments and Methods in Physics Research A 562 (2006) page 195
      TF1* funct;
      if(IsNegativeMomentum) funct = new TF1(a_functionName.c_str(), "log(pow(sqrt([5]*[5] + x*x)/(-1.0*x),[3]) * ([0] - [1]*log([2] + pow([5]/(-1.0*x),[4]))) - [1])",-10.0,-0.5);
      else funct = new TF1(a_functionName.c_str(), "log(pow(sqrt([5]*[5] + x*x)/x,[3]) * ([0] - [1]*log([2] + pow([5]/x,[4]))) - [1])",0.0,10.0);
      //   ln(   (beta)^-D * (A - B ln(C + betagamma^-E)) - B   )
      /*funct->SetParNames("A","B","C","D","E","m");
	funct->SetParameter(0,-5.18614e+00);// A
	funct->SetParameter(1,-4.51905e+00);// B
	funct->SetParameter(2, 2.25999e+00); //C
	funct->SetParameter(3, 7.86756e-01); //D
	funct->SetParameter(4, 2.32399e+00);// E
	funct->SetParameter(5,a_mass); // m*/
      funct->SetParNames("A","B","C","D","E","m");
      funct->SetParameter(0,-5.14284e+00);// A
      funct->SetParameter(1,-4.65154e+00);// B
      funct->SetParameter(2, 1.94239e+00); //C
      funct->SetParameter(3,-9.90463e-02); //D
      funct->SetParameter(4, 3.19269e+00);// E
      funct->SetParameter(5,a_mass); // m


      funct->SetNpx(1000);
      return funct;
    }

    void initialize()
    {
      lowestMomWhichHasAFit[0]=0.130000;
      lowestMomUsedForBichselFit[0]=0.200000;

      mean_graph[0] = new TGraph(20,pointwise_momentum_0,pointwise_mean_0);
      sig1_graph[0] = new TGraph(20,pointwise_momentum_0,pointwise_1sig_0);

      lowestMomWhichHasAFit[1]=0.170000;
      lowestMomUsedForBichselFit[1]=0.240000;

      mean_graph[1] = new TGraph(24,pointwise_momentum_1,pointwise_mean_1);
      sig1_graph[1] = new TGraph(24,pointwise_momentum_1,pointwise_1sig_1);

      lowestMomWhichHasAFit[2]=0.250000;
      lowestMomUsedForBichselFit[2]=0.320000;
    
      mean_graph[2] = new TGraph(32,pointwise_momentum_2,pointwise_mean_2);
      sig1_graph[2] = new TGraph(32,pointwise_momentum_2,pointwise_1sig_2);  

      // Loop over rapidity steps 
      for(int i=0; i<numRapidityWindows; i++)
	{
	  bichselFunction_mean[i] = getLnBichselFunction(Form("bichselFunction_mean_%d",i),0.938);
	  bichselFunction_1sig[i] = getLnBichselFunction(Form("bichselFunction_1sig_%d",i),0.938);
	  for(int j=0; j<6; j++){
	    bichselFunction_mean[i]->SetParameter(j,meanBichselParameters[i][j]);
	    bichselFunction_1sig[i]->SetParameter(j,sig1BichselParameters[i][j]);
	  }
	}
    } // End initialize()


    double getNewNSigmaProton(double rapidity, double momentum, double dedx)
    {
      // Later when the rapidity, momentum, and dedx of a track has been grabbed, calculate the nσ_p value  
      double nSigmaProton = 999; 
      double lndedx = log(dedx); 
      rapidity = fabs(rapidity); // take absolute value of rapidity
      //int rapIndex = TMath::FloorNint(10.0*rapidity);
      int rapIndex_lo = TMath::FloorNint(10.0*(-0.05+TMath::Abs(rapidity)));
      int rapIndex_hi = rapIndex_lo + 1;
      if(rapIndex_lo==-1) rapIndex_lo=0;
      if(rapIndex_hi==-1) rapIndex_hi=0;
      if(rapIndex_hi>=17) rapIndex_hi=16;
      if(rapIndex_lo>=17) rapIndex_lo=16;
      //double rapPointwiseCutoff = 10.0*numRapidityWindowsToUsePointwiseCorrection;
      double shiftValue_lo = 0.0;
      double shiftValue_hi = 0.0;
      double shiftValue = 0.0;
      double stretchValue_lo = 1.0;
      double stretchValue_hi = 1.0;
      double stretchValue = 1.0;
      if(rapIndex_lo < numRapidityWindowsToUsePointwiseCorrection && momentum < lowestMomUsedForBichselFit[rapIndex_lo])
	{
	  shiftValue_lo = mean_graph[rapIndex_lo]->Eval(momentum); 
	  stretchValue_lo = sig1_graph[rapIndex_lo]->Eval(momentum); 
	  if(momentum < lowestMomWhichHasAFit[rapIndex_lo])
	    {
	      shiftValue_lo = mean_graph[rapIndex_lo]->GetY()[0]; 
	      stretchValue_lo = sig1_graph[rapIndex_lo]->GetY()[0];
	    } 
	}
      else 
	{ 
	  shiftValue_lo = bichselFunction_mean[rapIndex_lo]->Eval(momentum); 
	  stretchValue_lo = bichselFunction_1sig[rapIndex_lo]->Eval(momentum); 
	}
      if(rapIndex_hi < numRapidityWindowsToUsePointwiseCorrection && momentum < lowestMomUsedForBichselFit[rapIndex_hi])
	{
	  shiftValue_hi = mean_graph[rapIndex_hi]->Eval(momentum); 
	  stretchValue_hi = sig1_graph[rapIndex_hi]->Eval(momentum);
	  if(momentum < lowestMomWhichHasAFit[rapIndex_hi])
	    {
	      shiftValue_hi = mean_graph[rapIndex_hi]->GetY()[0]; 
	      stretchValue_hi = sig1_graph[rapIndex_hi]->GetY()[0];
	    } 
	}
      else 
	{ shiftValue_hi = bichselFunction_mean[rapIndex_hi]->Eval(momentum); 
	  stretchValue_hi = bichselFunction_1sig[rapIndex_hi]->Eval(momentum); 
	}
     
      double rapidity_lo = 0.05+0.1*(rapIndex_lo);
      double rapidity_hi = 0.05+0.1*(rapIndex_hi);
      double relativeWeight;
      if(rapidity_lo == rapidity_hi) relativeWeight = 0.5;

      if(rapidity < rapidity_lo) relativeWeight = 0.0;
      else if(rapidity > rapidity_hi) relativeWeight = 1.0;
      else relativeWeight = (rapidity-rapidity_lo)/(rapidity_hi-rapidity_lo);

      shiftValue = relativeWeight*shiftValue_hi + (1.0-relativeWeight)*shiftValue_lo;
      stretchValue = relativeWeight*stretchValue_hi + (1.0-relativeWeight)*stretchValue_lo;
     
      // Now shift and stretch ln(de/dx) to get nSigmaProton 
      double shiftedLnDedx = lndedx-shiftValue;
      nSigmaProton = shiftedLnDedx/(shiftValue-stretchValue);
     
      // Reject tracks with the following traits 
      //if(nHitsDedx<20) nSigmaProton = 999; 
      if(momentum<0.0 || momentum > 10.0) nSigmaProton = 999; 

      return nSigmaProton;
    } // End getNewNSigmaProton()
  }; // End struct NewNSigmaProton3p9GeV



  struct NewNSigmaProton4p5GeV
  {
    const static int numRapidityWindows = 17;
    const static int numRapidityWindowsToUsePointwiseCorrection = 3;
    TF1* bichselFunction_mean[numRapidityWindows];
    TF1* bichselFunction_1sig[numRapidityWindows];
  
    TGraph* mean_graph[3];
    TGraph* sig1_graph[3];
    // Pointwise-correction parameters to be used at low momenta and low rapidities 
    double lowestMomWhichHasAFit[3];
    double lowestMomUsedForBichselFit[3];
    
    double pointwise_momentum_0[20] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195};
    double pointwise_mean_0[20] = {4.09365, 4.09365, 4.09365, 4.09365, 4.09365, 4.09365, 4.09365, 4.09365, 4.09365, 4.09365, 4.09365, 4.09365, 4.09365, 4.09365, 4.05405, 4.00152, 3.94765, 3.89523, 3.841, 3.78386};
    double pointwise_1sig_0[20] = {4.03159, 4.03159, 4.03159, 4.03159, 4.03159, 4.03159, 4.03159, 4.03159, 4.03159, 4.03159, 4.03159, 4.03159, 4.03159, 4.03159, 3.99234, 3.93627, 3.88369, 3.83597, 3.78675, 3.73152};
    
    double pointwise_momentum_1[24] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195, 0.205, 0.215, 0.225, 0.235};
    double pointwise_mean_1[24] = {3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.87467, 3.81896, 3.76826, 3.71725, 3.66345, 3.60687, 3.54826};
    double pointwise_1sig_1[24] = {3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.80467, 3.74896, 3.70126, 3.65398, 3.60227, 3.54655, 3.48891};
    
    double pointwise_momentum_2[32] = {0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065, 0.075, 0.085, 0.095, 0.105, 0.115, 0.125, 0.135, 0.145, 0.155, 0.165, 0.175, 0.185, 0.195, 0.205, 0.215, 0.225, 0.235, 0.245, 0.255, 0.265, 0.275, 0.285, 0.295, 0.305, 0.315};
    double pointwise_mean_2[32] = {3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.42323, 3.37141, 3.32037, 3.26727, 3.21402, 3.16228, 3.11243};
    double pointwise_1sig_2[32] = {3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.35323, 3.30141, 3.25037, 3.19792, 3.14654, 3.09698, 3.04921};
    
    // Parameters from Bichsel curve fits (H. Bichsel / Nuclear Instruments and Methods in Physics Research A 562 (2006) page 195) 
    double meanBichselParameters[numRapidityWindows][6] = {
      {-0.878993,-2.317102,1.722582,1.131647,2.220628,0.938000},
      {-0.189078,-1.908437,1.721055,1.147400,2.525231,0.938000},
      {-0.201507,-1.955316,1.625150,1.205107,2.420558,0.938000},
      {-5.105297,-4.642927,1.968073,0.958584,2.077747,0.938000},
      {-5.090398,-4.677399,1.952695,0.863164,2.250091,0.938000},
      {-5.078298,-4.744772,1.912748,0.657149,2.486766,0.938000},
      {-5.044129,-4.816336,1.857193,0.199179,2.895074,0.938000},
      {-2.055400,-3.892668,1.267918,-0.338285,3.492077,0.938000},
      {0.115918,-3.330273,0.816915,-0.749739,3.901644,0.938000},
      {-9.467907,-7.285930,1.984900,0.705668,2.633194,0.938000},
      {-9.670624,-8.318109,1.667156,1.196107,2.541994,0.938000},
      {-7.983004,-7.772080,1.494031,1.363233,2.594165,0.938000},
      {-4.618411,-6.698504,1.134318,1.952621,2.673747,0.938000},
      {-2.918459,-7.065833,0.844667,1.953744,2.994180,0.938000},
      {-3.030857,-6.939436,0.866608,1.491180,3.116373,0.938000},
      {-4.487478,-5.637798,1.355464,1.133786,2.853095,0.938000},
      {-4.525409,-5.446432,1.435297,1.149635,2.880920,0.938000}
    };
    double sig1BichselParameters[numRapidityWindows][6] = {
      {0.010680,-3.345721,0.791844,1.141033,2.392233,0.653260},
      {2.632076,-2.518065,0.374227,1.368559,2.766669,0.555622},
      {-5.155654,-4.647320,1.945173,0.891506,2.147227,0.893156},
      {-5.152697,-4.648901,1.942672,0.870726,2.212334,0.904123},
      {-5.206472,-4.723595,1.919716,0.764264,2.366571,0.906424},
      {-5.133057,-4.544795,2.021496,0.523465,2.623447,0.946695},
      {-3.614053,-3.271727,2.472167,0.115895,3.188194,1.144807},
      {-3.893105,-3.493578,2.356486,-1.101787,4.693655,1.172724},
      {-3.835657,-3.098863,2.942318,-1.382106,5.278179,1.360753},
      {-12.259466,-8.502958,2.128565,0.662530,2.589974,0.908177},
      {-7.948264,-7.194245,1.619977,1.135863,2.607592,0.915820},
      {-8.205761,-7.608636,1.554044,1.315144,2.595075,0.930365},
      {-10.661223,-8.815795,1.693172,1.352099,2.532983,1.016327},
      {-7.006314,-6.497088,1.672735,1.666056,2.822535,1.189091},
      {-6.573408,-6.101615,1.720192,1.776161,2.888317,1.336846},
      {-6.233619,-5.769010,1.758411,1.894112,2.652388,1.370290},
      {-5.086869,-4.686561,1.965677,1.962093,2.724107,1.392304}
    };

    TF1* getLnBichselFunction(std::string a_functionName,double a_mass, bool IsNegativeMomentum=false){
      //H. Bichsel / Nuclear Instruments and Methods in Physics Research A 562 (2006) page 195
      TF1* funct;
      if(IsNegativeMomentum) funct = new TF1(a_functionName.c_str(), "log(pow(sqrt([5]*[5] + x*x)/(-1.0*x),[3]) * ([0] - [1]*log([2] + pow([5]/(-1.0*x),[4]))) - [1])",-10.0,-0.5);
      else funct = new TF1(a_functionName.c_str(), "log(pow(sqrt([5]*[5] + x*x)/x,[3]) * ([0] - [1]*log([2] + pow([5]/x,[4]))) - [1])",0.0,10.0);
      //   ln(   (beta)^-D * (A - B ln(C + betagamma^-E)) - B   )
      /*funct->SetParNames("A","B","C","D","E","m");
	funct->SetParameter(0,-5.18614e+00);// A
	funct->SetParameter(1,-4.51905e+00);// B
	funct->SetParameter(2, 2.25999e+00); //C
	funct->SetParameter(3, 7.86756e-01); //D
	funct->SetParameter(4, 2.32399e+00);// E
	funct->SetParameter(5,a_mass); // m*/
      funct->SetParNames("A","B","C","D","E","m");
      funct->SetParameter(0,-5.14284e+00);// A
      funct->SetParameter(1,-4.65154e+00);// B
      funct->SetParameter(2, 1.94239e+00); //C
      funct->SetParameter(3,-9.90463e-02); //D
      funct->SetParameter(4, 3.19269e+00);// E
      funct->SetParameter(5,a_mass); // m


      funct->SetNpx(1000);
      return funct;
    }

    void initialize()
    {
      lowestMomWhichHasAFit[0]=0.130000;
      lowestMomUsedForBichselFit[0]=0.200000;

      mean_graph[0] = new TGraph(20,pointwise_momentum_0,pointwise_mean_0);
      sig1_graph[0] = new TGraph(20,pointwise_momentum_0,pointwise_1sig_0);

      lowestMomWhichHasAFit[1]=0.170000;
      lowestMomUsedForBichselFit[1]=0.240000;

      mean_graph[1] = new TGraph(24,pointwise_momentum_1,pointwise_mean_1);
      sig1_graph[1] = new TGraph(24,pointwise_momentum_1,pointwise_1sig_1);

      lowestMomWhichHasAFit[2]=0.250000;
      lowestMomUsedForBichselFit[2]=0.320000;

      mean_graph[2] = new TGraph(32,pointwise_momentum_2,pointwise_mean_2);
      sig1_graph[2] = new TGraph(32,pointwise_momentum_2,pointwise_1sig_2);
  
      // Loop over rapidity steps 
      for(int i=0; i<numRapidityWindows; i++)
	{
	  bichselFunction_mean[i] = getLnBichselFunction(Form("bichselFunction_mean_%d",i),0.938);
	  bichselFunction_1sig[i] = getLnBichselFunction(Form("bichselFunction_1sig_%d",i),0.938);
	  for(int j=0; j<6; j++){
	    bichselFunction_mean[i]->SetParameter(j,meanBichselParameters[i][j]);
	    bichselFunction_1sig[i]->SetParameter(j,sig1BichselParameters[i][j]);
	  }
	}
    } // End initialize()


    double getNewNSigmaProton(double rapidity, double momentum, double dedx)
    {
      // Later when the rapidity, momentum, and dedx of a track has been grabbed, calculate the nσ_p value  
      double nSigmaProton = 999; 
      double lndedx = log(dedx); 
      rapidity = fabs(rapidity); // take absolute value of rapidity
      //int rapIndex = TMath::FloorNint(10.0*rapidity);
      int rapIndex_lo = TMath::FloorNint(10.0*(-0.05+TMath::Abs(rapidity)));
      int rapIndex_hi = rapIndex_lo + 1;
      if(rapIndex_lo==-1) rapIndex_lo=0;
      if(rapIndex_hi==-1) rapIndex_hi=0;
      if(rapIndex_hi>=17) rapIndex_hi=16;
      if(rapIndex_lo>=17) rapIndex_lo=16;
      //double rapPointwiseCutoff = 10.0*numRapidityWindowsToUsePointwiseCorrection;
      double shiftValue_lo = 0.0;
      double shiftValue_hi = 0.0;
      double shiftValue = 0.0;
      double stretchValue_lo = 1.0;
      double stretchValue_hi = 1.0;
      double stretchValue = 1.0;
      if(rapIndex_lo < numRapidityWindowsToUsePointwiseCorrection && momentum < lowestMomUsedForBichselFit[rapIndex_lo])
	{
	  shiftValue_lo = mean_graph[rapIndex_lo]->Eval(momentum); 
	  stretchValue_lo = sig1_graph[rapIndex_lo]->Eval(momentum); 
	  if(momentum < lowestMomWhichHasAFit[rapIndex_lo])
	    {
	      shiftValue_lo = mean_graph[rapIndex_lo]->GetY()[0]; 
	      stretchValue_lo = sig1_graph[rapIndex_lo]->GetY()[0];
	    } 
	}
      else 
	{ 
	  shiftValue_lo = bichselFunction_mean[rapIndex_lo]->Eval(momentum); 
	  stretchValue_lo = bichselFunction_1sig[rapIndex_lo]->Eval(momentum); 
	}
      if(rapIndex_hi < numRapidityWindowsToUsePointwiseCorrection && momentum < lowestMomUsedForBichselFit[rapIndex_hi])
	{
	  shiftValue_hi = mean_graph[rapIndex_hi]->Eval(momentum); 
	  stretchValue_hi = sig1_graph[rapIndex_hi]->Eval(momentum);
	  if(momentum < lowestMomWhichHasAFit[rapIndex_hi])
	    {
	      shiftValue_hi = mean_graph[rapIndex_hi]->GetY()[0]; 
	      stretchValue_hi = sig1_graph[rapIndex_hi]->GetY()[0];
	    } 
	}
      else 
	{ shiftValue_hi = bichselFunction_mean[rapIndex_hi]->Eval(momentum); 
	  stretchValue_hi = bichselFunction_1sig[rapIndex_hi]->Eval(momentum); 
	}
     
      double rapidity_lo = 0.05+0.1*(rapIndex_lo);
      double rapidity_hi = 0.05+0.1*(rapIndex_hi);
      double relativeWeight;
      if(rapidity_lo == rapidity_hi) relativeWeight = 0.5;

      if(rapidity < rapidity_lo) relativeWeight = 0.0;
      else if(rapidity > rapidity_hi) relativeWeight = 1.0;
      else relativeWeight = (rapidity-rapidity_lo)/(rapidity_hi-rapidity_lo);

      shiftValue = relativeWeight*shiftValue_hi + (1.0-relativeWeight)*shiftValue_lo;
      stretchValue = relativeWeight*stretchValue_hi + (1.0-relativeWeight)*stretchValue_lo;
     
      // Now shift and stretch ln(de/dx) to get nSigmaProton 
      double shiftedLnDedx = lndedx-shiftValue;
      nSigmaProton = shiftedLnDedx/(shiftValue-stretchValue);
     
      // Reject tracks with the following traits 
      //if(nHitsDedx<20) nSigmaProton = 999; 
      if(momentum<0.0 || momentum > 10.0) nSigmaProton = 999; 

      return nSigmaProton;
    } // End getNewNSigmaProton()
  }; // End struct NewNSigmaProton4p5GeV



}// End namespace NSigmaCorrectionUtils

#endif
